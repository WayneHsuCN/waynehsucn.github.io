<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://waynehsucn.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://waynehsucn.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-04T11:52:03+00:00</updated><id>https://waynehsucn.github.io//feed.xml</id><title type="html">Wenjie Xu</title><subtitle>Wenjie Xu&apos;s home page. </subtitle><entry><title type="html">2025 年的第一天，说点什么吧</title><link href="https://waynehsucn.github.io//blog/2025/%E9%9A%8F%E7%AC%9425%E5%B2%81%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/" rel="alternate" type="text/html" title="2025 年的第一天，说点什么吧"/><published>2025-01-01T18:00:00+00:00</published><updated>2025-01-01T18:00:00+00:00</updated><id>https://waynehsucn.github.io//blog/2025/%E9%9A%8F%E7%AC%9425%E5%B2%81%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9</id><content type="html" xml:base="https://waynehsucn.github.io//blog/2025/%E9%9A%8F%E7%AC%9425%E5%B2%81%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/"><![CDATA[<p>今天是 2025 年 1 月 1 日，新的一年开始了，又长一岁。没有特别的庆祝活动，只是泡了一杯咖啡，坐在书桌前，想着随便写点什么。我是一个缺乏仪式感的人，对一切节日都无感。对我来说，所有的日子都是一样的，好也一样，不好也一样，所有的意义都是人为赋予的。2025 年没什么不同，和过去的每一年一样，有学术的压力，有探索的乐趣，有焦虑，有平静。一年年这样过去了，日子像缓缓流动的水，偶尔泛起些涟漪，但终究归于平稳。</p> <p>今年我即将 25 岁。25 岁，对我来说是个有点微妙的数字。15 岁时，20 岁似乎代表着「大人」，代表着成熟和独立，代表着一切问题的答案。20 岁的时候，25 岁代表着我理想中的模样——一个已经找到方向、稳步前行的人。对时间的感觉，25 岁和 15 岁、20 岁是不一样的。15 岁时，我对时间毫无概念，总觉得未来还远，日子还长，从来不从时间的角度思考问题。20 岁的时候，我开始有了些模糊的目标，但依然觉得时间是用不完的，喜欢做什么就做什么，想怎么做就怎么做。</p> <p>就这么糊里糊涂地一路走来，咣当一下，25 岁了。现在，我也来到了自己曾经憧憬的年纪，却发现很多事情并没有想象中那么简单。它甚至和我 20 岁的时候差不多，没什么明确的答案，甚至有更多的困惑和不确定性。有时候让人焦虑，有时候却也让人觉得自由。</p> <p>说实话，我很少从「时间」的角度去看待自己的人生。过去的几年，我更多的是顺势而为。每一天的时间被切割成了课程、实验、写作和娱乐，很少停下来想自己是谁，想要去哪里。不过也正因为如此，时间这件事在我的生活里似乎变得模糊了，它不再是一个倒计时，不再是一个需要追逐的目标，而是一种很自然的流动，像是空气，虽然无法感知但又无处不在。</p> <p>站在新年的开头，我想，或许可以试着从另一个角度看待时间。它不是一条直线，而是一个慢慢扩展的圆。随着时间过去，我们的经历、知识、视野，像是在这个圆上不断延展的边界。小时候觉得世界很简单，因为那个时候的圆还很小，边界很近。而现在，见过了更多的风景，接触了更多的人，才知道世界的复杂和广阔。每一个人的边界都不一样，每一个圆也都有独特的形状，这让我更理解多样性，也更愿意去尊重和接纳。</p> <p>这一年我不想做太多宏大的计划。过去的经验告诉我，计划这件事很容易被生活的偶然打断，反倒让人失去对当下的专注。所以，2025 年对我来说，更多的是去保持一种意识：看见。看见自己，看见别人，看见这个世界的多种可能性。或许这一年我还是会有迷茫，但只要能在这一年的时间里有新的看见，能更加清楚地知道自己是谁，想要的是什么，那就很好了。</p> <p>所以新年还是有意义的，我通过时间看见自己的成长，看见世界的复杂与多样，越来越清楚自己是谁、想要什么、想去哪里。意义是我们赋予它的，而不是它本身就有的。</p> <p>这样就挺好的。</p>]]></content><author><name></name></author><category term="Life"/><category term="Thoughts"/><category term="Discussion"/><summary type="html"><![CDATA[闲言碎语]]></summary></entry><entry><title type="html">2024 年科研工作的心得体会</title><link href="https://waynehsucn.github.io//blog/2024/2024%E5%B9%B4%E7%A7%91%E7%A0%94%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/" rel="alternate" type="text/html" title="2024 年科研工作的心得体会"/><published>2024-12-15T22:30:35+00:00</published><updated>2024-12-15T22:30:35+00:00</updated><id>https://waynehsucn.github.io//blog/2024/2024%E5%B9%B4%E7%A7%91%E7%A0%94%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A</id><content type="html" xml:base="https://waynehsucn.github.io//blog/2024/2024%E5%B9%B4%E7%A7%91%E7%A0%94%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"><![CDATA[<p>我的科研旅程始于 2020 年，那时我刚刚迈入科研的大门。到了 2024 年，我已经是研一，并在这一年里申请硕转博。回顾这四年的历程，虽然不能说是一路顺风，但也没有让我感到痛苦。事实上，科研工作对我而言并非折磨，相反，我非常习惯且享受科研工作的「弹性」节奏。</p> <p>2023 到 2024 年，是一个全新的起点（读研），同时也是一个矛盾交织的阶段——这是我最勤奋的一年，也是我最懒惰的一年。说勤奋，是因为我在学习新技能、新方法、新理念上投入了大量时间；说懒惰，是因为我几乎完全放弃了运动，甚至对写论文也提不起太多热情。2024 年也不完全是白混一年，主要进展可以归纳为以下几个方面：</p> <ul> <li>发表四篇中文论文（三篇来自项目约稿，每篇也就几千字的小报告，一篇为以前的工作在 CSSCI 索引期刊发表），一篇英文论文（EI 索引，会议投稿）；</li> <li>申请两项软件著作权（应导师国自科的解题需要，丰富下成果，很快的手搓了两个）；</li> <li>获得两个学术奖励（两个会议的「最佳论文」，有个还是战略院认定的重要会议，虽然很水）；</li> <li>参与了六七个课题（基本都是作为研究骨干，写了一大堆东西，但都没啥难度，占用时间也不是特别多，但写完课题的东西我就懒得在写论文了）；</li> <li>应老师要求帮助同门修订了一篇中文论文（帮别人改论文比自己写还痛苦，CSSCI 索引期刊，但把我名字挂到二作了）；</li> <li>一篇拖延半年、拼凑而成的英文论文投稿，因多次被拒而年底返工再投（两项工作整合而成，其中一个工作我都不知道他干啥的，所以一直不想写）；</li> <li>还有一项正在进行的工作，但步子迈得太大，推进缓慢（主要是懒）。</li> </ul> <p>这一年我的游戏生活非常丰富，占据了大约一半时间——玩游戏（铲铲铲）、折腾各种小玩意儿（i love coding），重心并不在科研工作上，浪费了很多时间。但即使如此，经过几年的科研训练、实践和反思，我对科研工作的认识与理解逐渐加深，也积累了一些经验与心得。</p> <h4 id="科研的起点拥抱尝试与不完美">科研的起点：拥抱尝试与不完美</h4> <p>科研的初步阶段充满了不确定性与挑战，它的魅力不在于完美无缺的开局，在于探索从无到有的过程。面对「完美主义倾向」的束缚，我逐渐意识到，科学探索的最大敌人是停滞不前，而非不完美的尝试。初稿的粗略构思、实验中的反复试错，甚至是一些看似无序的灵感记录，都可能成为未来创新的重要基础。每一个不完美的开始都是一种积累，每一次尝试都是打破「空白」的关键。这种思维方式的重塑，让我学会接受「不完美」的起点，并通过不断打磨与实践实现突破。</p> <h4 id="科研的实践路径体系化与流程化">科研的实践路径：体系化与流程化</h4> <p>科研的复杂性与冗长性，往往让人深陷琐碎和混乱之中。有效的科研实践不仅依赖个人智慧与创造，更需要体系化的工具整合与流程化的思维方式，以此应对科研过程中海量信息与多线程任务的挑战。研究生入学后，我逐步实现了科研工作的技术优化和流程再造，构建了一套适应多种场景的工具协同体系，以应对不同任务的挑战。</p> <h5 id="工具与技术体系的搭建">工具与技术体系的搭建</h5> <ul> <li> <p><strong><u>面向高性能计算与科学编程</u></strong>，在 Python/Matlab/R/C 语言的基础上，拓展学习了 Julia 语言，利用其在数值计算与性能优化方面的天然优势，尝试解决大规模数据计算中的效率瓶颈，为后续实验提供更高效的支撑。</p> </li> <li> <p><strong><u>面向前端开发与绘图展示</u></strong>，掌握了 JavaScript/TypeScript，并基于 Jekyll 框架搭建了个人学术主页，系统化地展示了研究成果与学术内容。</p> </li> <li> <p><strong><u>面向文档处理与排版美化</u></strong>，掌握了 LaTeX 与 Typst，通过高度自动化与模板化的排版流程，进一步提升了学术写作的规范性与美观性。</p> </li> <li> <p><strong><u>面向开发环境与工具流的整合</u></strong>，基于 WSL/Docker 搭建了跨平台的开发环境，实现了 Windows 与 Linux 系统间的无缝切换，提升了开发流程的一致性与连贯性。</p> </li> <li> <p><strong><u>面向知识管理与大模型应用</u></strong>，建立了结构化的个人知识管理系统，对实验笔记、文献资料与学习内容进行系统归纳，实现了信息的高效检索与知识网络构建。结合大模型，在文献总结、代码调试与写作优化等方面获得了显著的效率提升。</p> </li> </ul> <h5 id="流程化思维的形成">流程化思维的形成</h5> <p>科研不仅是一种灵感驱动的活动，更需要系统规划与阶段性目标的引导。我逐渐意识到，自顶向下的科研规划能够避免漫无目的的盲目尝试，让每个阶段都有条不紊地推进。在此过程中，从数据收集到实验设计、从文献阅读到成果输出，我都力求形成统一的工作流，实现了高效、精准的任务管理。</p> <h4 id="科研中的个人成长积累与协同">科研中的个人成长：积累与协同</h4> <p><strong><u>灵感的捕捉与积累</u></strong>。灵感常在不经意间闪现，若不及时记录、深化，便可能错失许多重要机会。每当新的想法产生时，我都会及时记录并围绕其进行思考，即便简单粗略也不放弃深化。这些微小的积累，如同拼图般，在未来某一时刻可能形成完整的科研蓝图。科研需要长期的建设与积累，点滴努力终将汇聚成突破的契机</p> <p><strong><u>团队协作的价值</u></strong>。团队是科研的重要支撑。一个好的科研团队不仅能提供强有力的学术支持，更能激发个人潜力。在研究生阶段，我深刻体会到，<u>科研的高度离不开协同的广度</u>。团队成员的互相支撑与合作，让我逐渐从单兵作战转向协同协作。我在与团队伙伴的合作中学会了倾听与分享，理解了如何基于各自的专长分工合作，充分发挥集体智慧的优势。科研需要不断与同行、导师以及跨学科研究者进行高质量的交流。在这个过程中，接受批评与反馈是个人成长的催化剂。开放的态度让我学会接纳他人的意见，找到自身研究的不足，并通过互相启发，不断完善和拓展研究的深度与广度。</p> <h4 id="科研的关键面向科学问题的探索与解决">科研的关键：面向科学问题的探索与解决</h4> <p><strong><u>科学的进步始于对问题的敏锐洞察</u></strong>。科学研究总是围绕着提出问题和解决问题进行。但科研的核心并非简单地「做题」，而是敢于质疑现有认知，揭示未解的关键问题。现代科学发展已进入深度细分的时代，表面看似成熟的领域往往隐藏着新的挑战与机会。我逐渐认识到，提出一个真正有价值的问题，往往比解决一个简单的问题更具意义。科学的突破源自对问题的独特视角与深刻理解，而非仅仅追求标准答案。这不仅关乎科学发现的深度，更决定了研究的原创性和前瞻性。在实践中，我时常反思：当前领域的痛点在哪里？现有的理论与方法是否存在局限？未来的方向该如何突破？带着这些问题，通过系统回顾文献、深入梳理学科发展脉络，逐步厘清了本领域未被充分研究的空白地带，为进一步探索提供了切入点。</p> <p><strong><u>解决科学问题在于方法与路径的创新</u></strong>。在科研实践中，我逐渐认识到，创新不仅存在于理论方法的建构，还体现在解决问题的思维和路径上。不同学科的方法论与工具体系之间并非孤立存在，而是可以彼此借鉴、融会贯通。不同学科发展中积累的工具与方法，常常能够为其他领域提供新的解决思路。许多前沿科学问题都位于学科交汇处，而交叉学科的研究往往孕育着新的突破。这种跨学科的实践不仅能够促进科学问题的深入理解，还能催生更多具有前瞻性的研究方向。唯有秉持开放与跨学科的视野，才能从现象中捕捉问题，在复杂的问题中寻找到突破的可能性。</p>]]></content><author><name></name></author><category term="Life"/><category term="Thoughts"/><category term="Blogging"/><summary type="html"><![CDATA[部分内容来自 2024 年转博申请材料中的心得体会]]></summary></entry><entry><title type="html">中文的常态与变态</title><link href="https://waynehsucn.github.io//blog/2024/%E4%B8%AD%E6%96%87%E7%9A%84%E5%B8%B8%E6%80%81%E4%B8%8E%E5%8F%98%E6%80%81/" rel="alternate" type="text/html" title="中文的常态与变态"/><published>2024-12-02T15:13:29+00:00</published><updated>2024-12-02T15:13:29+00:00</updated><id>https://waynehsucn.github.io//blog/2024/%E4%B8%AD%E6%96%87%E7%9A%84%E5%B8%B8%E6%80%81%E4%B8%8E%E5%8F%98%E6%80%81</id><content type="html" xml:base="https://waynehsucn.github.io//blog/2024/%E4%B8%AD%E6%96%87%E7%9A%84%E5%B8%B8%E6%80%81%E4%B8%8E%E5%8F%98%E6%80%81/"><![CDATA[<blockquote> <p>剪辑自余光中先生 1987 年的一篇文章「中文的常态与变态」(<a href="https://mp.weixin.qq.com/s/8gvq--Hsb4dpIAHCleH-oQ">https://mp.weixin.qq.com/s/8gvq--Hsb4dpIAHCleH-oQ</a>)，仅转载，部分观点待商榷，我不完全认同。</p> </blockquote> <h2 id="一">一</h2> <p>自五四新文化运动以来，七十年间，中文的变化极大。一方面，优秀的作家与学者笔下的白话文愈写愈成熟，无论表情达意或是分析事理，都能运用自如。另一方面，道地的中文，包括文言文与民间文学的白话文，和我们的关系日渐生疏，而英文的影响，无论来自直接的学习或是间接的潜移默化，则日渐显著，因此一般人笔下的白话文，西化的病态日渐严重。一般人从大众传媒学到的，不仅是流行的观念，还有那些观念赖以包装的种种说法；有时，那些说法连高明之士也抗拒不了。今日的中文虽因地区不同而互见差异，但共同的趋势都是繁琐与生硬，例如中文本来是说「因此」，现在不少人却爱说「基于这个原因」；本来是说「问题很多」，现在不少人却爱说「有很多问题存在」。对于这种化简为繁、以拙代巧的趋势，有心人如果不及时提出警告，我们的中文势必越变越差，而地道中文原有的那种美德，那种简洁而又灵活的语文生态，也必将面目全非。</p> <p>中文也有生态吗？当然有。措词简洁、句式灵活、声调铿锵，这些都是中文生命的常态。能顺着这样的生态，就能长保中文的健康。要是处处违拗这样的生态，久而久之，中文就会污染而淤塞，危机日渐迫近。</p> <p>目前中文的一大危机，是西化。我自己出身外文系，三十多岁时有志于中文创新的试验，自问并非语文的保守派。大凡有志于中文创作的人，都不会认为善用四字成语就是创作的能事。反之，写文章而处处仰赖成语，等于只会用古人的脑来想，只会用古人的嘴来说，绝非豪杰之士。但是，再反过来说，写文章而不会使用成语，问题就更大了。写一篇完全不带成语的文章，不见得不可能，但是很不容易；这样的文章要写得好，就更难能可贵。目前的情形是，许多人写中文，已经不会用成语，至少会用的成语有限，显得捉襟见肘。一般香港学生目前只会说「总的来说」，却似乎忘了「总而言之」。同样地，大概也不会说「一言难尽」，只会说「不是一句话就能够说得清楚的」。</p> <p>成语历千百年而犹存，成为文化的一部分。例如「千锤百炼」，字义对称，平仄协调，如果一定要说成「千炼百锤」，当然也可以，不过听来不顺，不像「千锤百炼」那样含有美学。同样，「朝秦暮楚」、「齐大非偶」、「乐不思蜀」等语之中，都含有中国的历史。成语的衰退正显示文言的淡忘，文化意识的萎缩。</p> <p>英文没有学好，中文却学坏了，或者可说，带坏了。中文西化，不一定就是毛病。缓慢而适度的西化甚至是难以避免的趋势，高妙的西化更可以截长补短。但是太快太强的西化，破坏了中文的自然生态，就成了恶性西化。这种危机，有心人都应该及时警觉而且努力抵制。在欧洲的语文里面，文法比较单纯的英文恐怕是最近于中文的了。尽管如此，英文与中文仍有许多基本的差异，无法十分融洽。这一点，凡有中英文互译经验的人，想必都能同意。其实，研究翻译就等于研究比较语言学。以下拟就中英文之间的差异，略略分析中文西化之病。</p> <h2 id="二">二</h2> <p>比起中文来，英文不但富于抽象名词，也喜欢用抽象名词。英文可以说「他的收入的减少改变了他的生活方式」，中文这么说，就太西化了。英文用抽象名词「减少」做主词，十分自然。中文的说法是以具体名词，尤其是人，做主词：「他因为收入减少而改变生活方式」，或者「他收入减少，乃改变生活方式」。</p> <p>中文常用一件事情 (一个短句) 做主词，英文则常用一个名词 (或名词词组)。「横贯公路再度坍方，是今日的头条新闻」，是中文的说法。「横贯公路的再度坍方，是今日的头条新闻」，就是英文语法的流露了。同理，「选购书籍，只好委托你了」是中文语法。「书籍的选购，只好委托你了」却是略带西化。「推行国语，要靠大家努力」是自然的说法。「推行的国语，要靠大家的努力」却嫌冗赘。这种情形也可见于受词。例如「他们杯葛这种风俗的继续」，便是一句可怕的话。无论如何，「杯葛继续」总嫌生硬。如果改成「他们反对保存这种风俗」，就自然多了。</p> <p>英文好用抽象名词，其结果是软化了动词，也可以说是架空了动词。科学、社会科学与公文的用语，大举侵入了日常生活，逼得许多明确而有力动词渐渐变质，成为面无表情的词组。下面是几个常见的例子：</p> <blockquote> <p>apply pressure: press</p> <p>give authorization: permit</p> <p>send a communication: write</p> <p>take appropriate action: act</p> </blockquote> <p>在前例之中，简洁的单音节动词都变成了含有抽象名词的片词，表面上看来，显得比较堂皇而高级。例如 press 变成了 apply pressure，动作便一分为二，一半驯化为静止的抽象名词 pressure，一半淡化为广泛而笼统的动词 apply。巴仁 (Jacques Barzun) 与屈林 (Lionel Trilling) 等学者把这类广泛的动词叫做「弱动词」(weak verb)。他们说：「科学报告不免单调而冷淡，影响之余，现代的文体喜欢把思路分解成一串静止的概念，用介词和通常是被动语气的弱动词连接起来。」</p> <p>巴仁所谓的弱动词，相当于英国小说家奥韦尔所谓的「文字的义肢」(verbal false limb) 。当代的中文也已呈现这种病态，喜欢把简单明了的动词分解成「万能动词 + 抽象名词」的片词。目前最流行的万能动词，是「作出」和「进行」，恶势力之大，几乎要吃掉一半的正规动词。请看下面的例子：</p> <blockquote> <p>(一) 本校的校友对社会作出了重大的贡献。</p> <p>(二) 昨晚的听众对访问教授作出了十分热烈的反应。</p> <p>(三) 我们对国际贸易的问题已经进行了详细的研究。</p> <p>(四) 心理学家在老鼠的身上进行试验。</p> </blockquote> <p>不管是直接或间接的影响，这样的语法都是日渐西化的现象，因为中文原有的动词都分解成上述的繁琐词组了。前面的四句话本来可以分别说成</p> <blockquote> <p>(一) 本校的校友对社会贡献很大。</p> <p>(二) 昨晚的听众对访问教授反应十分热烈。</p> <p>(三) 我们对国际贸易的问题已经详加研究。</p> <p>(四) 心理学家用老鼠来做试验。(或：心理学家用老鼠试验。)</p> </blockquote> <p>巴仁等学者感概现代英文喜欢化简为繁、化动为静、化具体为抽象、化直接为迂回，到了「名词成灾」(noun-plague) 的地步。学问分工日细，各种学科的行话术语，尤其是科学与社会科学的「夹杠」，经过本行使用，外行借用，加上「新闻体」(journalese) 的传播，一方面固然使现代英文显得多彩多姿，另一方面却也造成混乱，使日常用语斑驳不堪。英国诗人格雷夫斯 (Robert Graves, 1895-1986) 在短诗 (耕田) (Tilth) 里批评这现象说：</p> <blockquote> <p>Gone are the sad monosyllabic days</p> <p>When “agricultural labour”still was tilth.</p> <p>And “00% approbation”, praise;</p> <p>And “pornographic modernism”, filth-</p> <p>And still I stand by tilth and filth and praise.</p> </blockquote> <p>「名词成灾」的流行病里，灾情最严重的该是所谓「科学至上」(scientism)。在现代的工业社会里，科学早成显贵，科技更是骄子，所以知识分子的口头与笔下，有意无意，总爱用一些「学术化」的抽象名词，好显得客观而精确。有人称之为「伪术语」(pseudo-jargon)。例如：明明是 firstst step，却要说成 initial phase：明明是 letter，却要说成 communication，都属此类。</p> <p>中文也是如此。本来可以说「名气」，却凭空造出一个「知名度」来，不说「很有名」，却要迂回作态，貌若高雅，说成「具有很高的知名度」，真是酸腐可笑。另一个伪术语是「可读性」，同样活跃于书评和出版广告。明明可以说「这本传记很动人」，「这本传记引人入胜」，或者干脆说「这本传记很好看」，却要说成「这本传记的可读性颇高」。我不明白这字眼怎么来的，因为这观念在英文里也只用形容词 readable 而不用抽象名词 readability。英文会说：The biography is highly readable，却不说 The biography has high readability。此风在台湾日渐嚣张。在电视上，记者早已在说「昨晚的演奏颇具可听性」。在书评里，也已见过这样的句子：「传统写实作品只要写得好，岂不比一篇急躁的实验小说更具可看性？」</p> <p>我实在不懂那位书评家以不能说「岂不比一篇……更耐看 (更动人)？」同理，「更具前瞻性」难道真比「更有远见」要高雅吗？长此以往，岂不要出现「他讲的这件趣事可笑性很高」一类的怪句？此外，「某某主义」之类抽象名词也使用过度，英美有心人士都主张少用为妙。中国大陆文章很爱说「富于爱国主义的精神」，其实颇有语病。爱国只是单纯的情感，何必学术化为主义？如果爱国也成主义，我们不是也可以说「亲日主义」、「仇美主义」、「怀乡主义」？其次，主义也就是一种精神，不必重复，所以只要说「富于爱国精神」就够了。</p> <p>名词而分单数与复数，是欧语文的惯例。英文文法的复数变化，比起其它欧洲语文来，单纯得多。请看「玫瑰都很娇小」这句话在英文、法文、德文、西班牙文、意大利文里的各种说法：</p> <blockquote> <p>The roses are small.</p> <p>Les roses sont petites.</p> <p>Die Rosen sind klein.</p> <p>Las rosas son chiquitas.</p> <p>Le rose sono piccole.</p> </blockquote> <p>每句话都是四个字，次序完全一样，都是冠词、名词、动词、形容词。英文句里，只有动词跟着名词变化，其它二字则不分单、复数。德文句里，只有形容词不变。法文、西班牙文、意大利文的三句里，因为做主词的名词是复数，其它的字全跟着变化。</p> <p>幸而中文的名词没有复数的变化，也不区分性别，否则将不胜其繁琐。旧小说的对话里确有「爷们」、「娘们」、「ㄚ头们」等复数词，但是在叙述的部分，仍用「诸姐妹」、「众ㄚ鬟」。中文要表多数的时候，也会说「民众」、「徒众」、「观众」、「听众」，所以「众」也有点「们」的作用。但是「众」也好，「们」也好，在中文里并非处处需要复数语尾。往往，我们说「文武百官」，不说「官们」，也不说「文官们」、「武官们」。同理「全国的同胞」、「全校的师生」、「所有的顾客」、「一切乘客」当然是复数，不必再画蛇添足，加以标明。不少国人惑于西化的意识，常爱这么添足，于是「人们」取代原有的「人人」、「大家」、「大众」、「众人」、「世</p> <p>人」。「人们」实在是丑陃的西化词，林语堂绝不使用，希望大家也不要使用。电视上也有人说「民众们」、「听众们」、「球员们」，实在累赘。尤其「众、们」并用，已经不通。</p> <p>中文词不分数量，有时也会陷入困境。例如「一位观众」显然不通，但是「观众之一」却嫌累赘，也欠自然。「一位观者」毕竟不像「一位读者」那么现成，所以，「一位观众来信说……」之类的句子，也只好由它去了。</p> <p>可是「……之一」的泛滥，却不容忽视。「……之一」虽然是单数，但是背景的意识却是多数。和其它欧洲语文一样，英文也爱说 one of my favorite actresses, oneof those who believe……, one of the most active promoters。中文原无「……之一」的句法，现在我们说「观众之一」实在是不得已。至于这样的句子：</p> <blockquote> <p>刘伶是竹林七贤之一。</p> <p>作为竹林七贤之一的刘伶……</p> </blockquote> <p>目前已经非常流行。前一句虽然西化，但不算冗赘。后一句却恶性西化的畸婴，不但「作为」二字纯然多余，「之一的」也文白来杂，读来破碎，把主词「刘伶」压在底下，更是扭捏作态。其实，后一句的意思跟前一句完全一样，却把英文的语法 as oneof the Seven Worthies of Bamboo Grove, Liu Ling……生吞活剥地搬到中文里来。所以，与其说「作为竹林七贤之一的刘伶以嗜酒闻名」，何不平平实实地说「刘伶是竹林七贤之一，以嗜酒闻名」？其实前一句也尽有办法不说「之一」。中文本来可以说「刘伶乃竹林七贤之同侪」；「刘伶列于竹林七贤」；「刘伶跻身竹林七贤」；「刘伶是竹林七贤的同人」。</p> <p>「竹林七贤之一」也好，「文房四宝之一」也好，情况都不严重，因为七和四范围明确，同时逻辑上也不能径说「刘伶是竹林七贤」，「砚乃文房四宝」。目前的不良趋势，是下列这样的句子：</p> <blockquote> <p>红楼梦是中国文学的名著之一。</p> <p>李广乃汉朝名将之一。</p> </blockquote> <p>两句之中。「之一」都是蛇足。世间万事万物都有其同俦同类，每次提到其一，都要照顾到其它，也未免太周到了。中国文学名著当然不止一部，汉朝名将当然也不会祇有一人，不加上这死心眼的「之一」，绝对没有人会误会你孤陋寡闻，或者挂一漏万。一旦养成了这种恶习，只怕笔下的句子都要写成「小张是我的好朋太之一」，「我不过是您的平庸的学生之一」，「他的嗜好之一是收集茶壸」了。</p> <p>「之一」之病到了香港，更变本加厉，成为「其中之一」。在香港的报刊上，早已流行「我是听王家的兄弟其中之一说的」或者「戴维连一直以来都是我最喜欢的导演其中之一」这类怪句。英文复数观念为害中文之深，由此可见。</p> <p>这就说到「最……之一」的语法来了。英文最喜欢说「他是当代最伟大的思想家之一」，好像真是精确极了，其实未必。「最伟大的」是抬到至高，「之一」却稍加低抑，结果只是抬高，并未真正抬到至高。你并不知道「最伟大的思想家」究竟是几位，四位吗，还是七位，所以弹性颇大。兜了一个大圈子回来，并无多大不同。所以，只要说「他是一个大名人」或「他是赫赫有名的人物」就够了，不必迂而回之，说什么「他是最有名气的人物之一」吧。</p> <h2 id="三">三</h2> <p>在英文里，词性相同的字眼常用 and 来连接：例如 man and wife, you and I, back and forth。但在中文里，类似的场合往往不用连接词，所以只要说「夫妻」、「你我」、「前后」就够了。同样地，一长串同类词在中文里，也任其并列，无须连接：例如「东南西北」、「金木水火土」、「礼乐射御书数」、「柴米油盐酱醋茶」皆是。中国人绝不说「开门七件事，柴、米、油、盐、酱、醋以及茶。」谁要这么说，一定会惹笑。同理，中文只说「思前想后」、「说古道今」。可是近来 and 的意识已经潜入中文，到处作怪。港报上有过这样的句子：</p> <p>在政治民主化与经济自由化的发展道路，台北显然比北京起步更早及迈步更快，致在政经体制改革的观念、行动、范围及对象，更为深广更具实质……</p> <p>这样的文笔实在不很畅顺，例如前半句中，当做连接词的「与」、「及」都不必要。「与」还可以说不必要，「及」简直就要不得。后半句的「更为深广更具实质」才像中文，「起步更早及迈步更快」简直是英文。「及」字破坏了中文生态，因为中文没有这种用法。此地一定要用连接词的话，也只能用「而」，不可用「及」。正如 slow but sure 在中文里该说「慢而可靠」或者「缓慢而有把握」，却不可说「慢及可靠」或者「缓慢与有把握」。「而」之为连接词，不但可表更进一步，例如「学而时习之」，还可表后退或修正，例如「国风好色而不淫，小雅怨诽而不乱」，可谓兼有 and 与 but 之功用。</p> <p>目前的不良趋势，是原来不用连接词的地方，在 and 意识的教唆下，都装上了连接词；而所谓连接词都由「和」、「与」、「及」、「以及」包办，可是灵活而宛转的「而」、「并」、「而且」等词，几乎要绝迹了。(※英：但也不要不当而而而！）</p> <h2 id="四">四</h2> <p>介词在英文里的用途远比中文里重要，简直成了英文的润滑剂。英文的不及物动词加上介词，往往变成了及物动词，例如 look after, take in 皆是。介词词组 (prepositional phrase) 又可当作形容词或助词使用，例如 a friend in need,said it in earnest。所以英文简直离不了介词。中文则不尽然。「扬州十日、嘉定三屠」两个词组不用一个介词，换了英文，非用不可。</p> <p>「欢迎王教授今天来到我们的中间，在有关环境污染的各种问题上，为我们作一次学术性的演讲。」这样不中不西的开场白，到处可以听见。其实「中间」、「有关」等介词，都是画蛇添足。有一些圣经的中译，牧师的传道，不顾中文的生态，会说成「神在你的里面」。意思懂，却不像中文。</p> <p>「有关」、「关于」之类，大概是用得最滥的介词了。「有关文革的种种，令人不能置信」；「今天我们讨论有关台湾交通的问题」；「关于他的申请，你看过了没有？」在这句子里，「有关」、「关于」完全多余。最近我担任「全国学生文学奖」评审，有一篇投稿的题目很长，叫「关于一个河堤孩子的成长故事」。十三个字里，「关于」两字毫无作用，「一个」与「故事」也可有可无。「关于」有几个表兄弟，最出风的是「由于」。这字眼在当代中文里，往往用得不妥：</p> <blockquote> <p>由于秦末天下大乱，(所以) 群雄四起。</p> <p>由于好奇心的驱使，我向窗内看了一眼。</p> <p>由于他的家境贫穷，使得他只好休学。</p> </blockquote> <p>英文在形式上重逻辑，喜欢交代事物物的因果关系。中文则不尽然。「清风徐来，水波不兴」，其中当然有因果关系，但是中文只用上下文作不言之喻。换了是英文，恐怕会说「因为清风徐来，所以水波不兴」，或者「清风徐来，而不兴起水波」。上列的第一句，其实删掉「由于」与「所以」，不但无损文意，反而可使文章干净。第二句的「由于好奇心的驱使」并没有什么大毛病 (注四)，可是有点啰嗦，更犯不着动用「驱使」一类的正式字眼。如果简化为「出于好奇，我向窗内看了一眼」或者「为了好奇，我向窗内看了一眼」，就好多了。第三句的不通，犯者最多。「由于他的家境贫穷」这种片语，只能拿来修饰动词，却不能当做主词。这一句如果删掉「由于」，「使得」一类交代因果的冗词，写成「他家境贫穷，只好休学」，反觉眉清目秀。</p> <h2 id="五">五</h2> <p>英文的副词形式对中文为害尚不显著，但也已经开始了。例如这样的句子：</p> <blockquote> <p>他苦心孤诣地想出一套好办法来。</p> <p>老师苦口婆心地劝了他半天。</p> <p>大家苦中作乐地竟然大唱其民谣。</p> </blockquote> <p>「苦」字开头的三句成语，本来都是动词，套上副词语尾的「地」就降为副词了。这么一来，文章仍然清楚，文法上却主客分明，太讲从属的关系，有点呆板。若把「地」一律删去，代以逗点，不但可以摆脱这主客的关系，语气也会灵活一些。</p> <p>有时这样的西化副词词组太长，例如「他知其不可为而为之地还是去赴了约」，就更应把「地」删掉，代之以逗点，使句法松松筋骨。目前最滥的副词是「成功地」。有一次我不该为入学试出了这么一个作文题目：〈国父诞辰的感想〉，结果十个考生里至少有六个都说：「国父孙中山先生成功地推翻了满清。」这副词「成功地」在此毫无意义，因为既然推而翻之，就是成功了，何待重复。同理，「成功地发明了相对论」、「成功地泳渡了直布罗陀海峡」也都是饶舌之说。天下万事，凡做到的都要加上「成功地」，岂不累人？</p> <h2 id="六">六</h2> <p>白话文一用到形容词，似乎就离不开「的」，简直无「的」不成句了。在白话文里，这「的」字成了形容词除不掉的尾巴，至少会出现在这些场合：</p> <blockquote> <p>好的，好的，我就来。是的，没问题。</p> <p>快来看这壮丽的落日！</p> <p>你的笔干了，先用我的笔吧。</p> <p>也像西湖的有里外湖一样，丽芒分为大湖小湖两部分。</p> <p>他当然是别有用心的。你不去是对的。</p> </blockquote> <p>喜欢用「的」或者无力拒「的」之人，也许还有更多的场合要偏劳这万能「的」字。我说「偏劳」，因为在英文里，形容词常用的语尾有-tive, -able, -ical, -ous 等多种，不像在中文里全由「的」来担任。英文句子里常常连用几个形容词，但因语尾变化颇大，不会落入今日中文的公式。例如雪莱的句子：</p> <blockquote> <p>An old, mad, blind, despised, and dying king──</p> <p>一连五个形容词，直译过来，就成了：</p> <p>一位衰老的、疯狂的、瞎眼的、被人蔑视的、垂死的君王──</p> </blockquote> <p>一碰到形容词，就不假思索，交给「的」去组织，正是流行的白话文所以僵化的原因。白话文所以啰嗦而软弱，虚字太多是一大原因，而用得最滥的虚字正是「的」。学会少用「的」字之道，恐怕是白话文作家的第一课吧。其实许多名作家在这方面都很随便，且举数例为证：</p> <blockquote> <p>(一) 月光是隔了树照过来的，高处丛生的灌木，落下参差的斑驳的黑影，峭楞楞如鬼一般；弯弯的杨柳的稀疏的倩影，却又像是画在荷叶上。</p> <p>(二) 最后的鸽群……也许是误认这灰暗的凄冷的天空为夜色的来袭，或是也预感到风雨的将至，遂过早地飞回它们温暖的木舍。</p> <p>(三) 白色的鸭也似有一点烦躁了，有不洁的颜色的都市的河沟里传出它们焦急的叫声。</p> </blockquote> <p>第一句的「参差的斑驳的黑影」和「弯弯的杨柳的稀疏的倩影」，都是单调而生硬的重迭。用这么多「的」，真有必要吗？为什么不能说「参差而斑驳」呢？后面半句的原意本是「弯弯的杨柳投下稀疏的倩影」，却不分层次，连用三个「的」，读者很自然会分成「弯弯的、杨柳的、稀疏的、倩影」。第二句至少可以省掉三个「的」。就是把「灰暗的凄冷的天空」改成「灰暗而凄冷的天空」，再把「夜色的来袭」和「风雨的将至」改成「夜色来袭」、「风雨将至」。前文说过，中文好用短句，英文好用名词，尤其是抽象名词。「夜色来袭」何等有力，「夜色的来袭」就松软下来了。最差的该是第三句了。「白色的鸭」跟「白鸭」有什么不同呢？「有不洁的颜色的都市的河沟」，乱用「的」字，最是惑人。此句原意应是「颜色不洁的都市河沟」(本可简化为)「都市的脏河沟」，但读者同样会念成「有不洁的、颜色的、都市的、河沟」。</p> <p>目前的形容词又有了新的花样，那便是用学术面貌的抽象名词来打扮。再举数例为证：</p> <blockquote> <p>这是难度很高的技巧。</p> <p>他不愧为热情型的人。</p> <p>太专业性的字眼恐怕查不到吧。</p> </blockquote> <p>「难度很高的」是什么鬼话呢？原意不就是「很难的」吗？同理，「热情型的人」就是「热情的人」；「太专业性的字眼」就是「太专门的字眼」。到抽象名词里去兜了一圈回来，门面像是堂皇了，内容仍是空洞的。</p> <p>形容词或修饰语 (modifier) 可以放在名词之前，谓之前饰，也可以跟在名词之后，谓之后饰。法文往往后饰，例如纪德的作品 La Symphonie pastorale 与 LesNourritures terrestres，形容词都跟在名词之后；若译成英文，例如 The Pastoral Symphony，便是前饰了。中文译为「田园交响乐」，也是前饰。</p> <p>英文的形容词照例是前饰，例如前引雪莱的诗句，但有时也可以后饰，例如雪莱的另一诗句：One too like thee–tameless, and swift, and proud。至于形容词片或子句，则往往后饰，例如：man of action, I saw a man who looked like yourbrother。（※英：此例极佳，请注意！）</p> <p>目前的白话文，不知何故，几乎一律前饰，似乎不懂后饰之道。例如前引的英文句，若用中文来说，一般人会不假思索说成：「我见到一个长得像你兄弟的男人。」却很少人会说：「我见到一个男人，长得像你兄弟。」如果句短，前饰也无所谓。如果句长，前饰就太生硬了。例如下面这句：「我见到一个长得像你兄弟说话也有点像他的陌生男人。」就冗长得尾大不掉了。要是改为后饰，就自然得多：「我见到一个陌生男人，长得像你兄弟，说话也有点像他。」其实文言文的句子往往是后饰的，例如司马迁写项羽与李广的这两句：</p> <blockquote> <p>籍长八尺余，力能扛鼎，才气过人。</p> <p>广为人长，猿臂，其善射亦天性也。</p> </blockquote> <p>这两句在当代白话文里，很可能变成：</p> <blockquote> <p>项籍是一个身高八尺，力能扛鼎，同时才气过人的汉子。</p> <p>李广是一个高个子，手臂长得好像猿臂，天性就会射箭的人。</p> </blockquote> <p>后饰句可以一路加下去，虽长而不失自然，富于弹性。前饰句以名词压底，一长了，就显得累赘，紧张，不胜负担。所以前饰句是关闭句，后饰句是开放句。</p> <h2 id="七">七</h2> <p>动词是英文文法的是非之地，多少纠纷，都是动词惹出来的。英文时态的变化，比起其它欧洲语文来，毕竟单纯得多。若是西班牙文，一个动词就会变出七十八种时态。中文的名词不分单复与阴阳，动词也不变时态，不知省了多少麻烦。(阿房宫赋) 的句子：「秦人不暇自哀，而后人哀之。后人哀之而不鉴之，亦使后人而复哀后人也。」就这么一个「哀」字，若用西文来说，真不知要玩出多少花样来。</p> <p>中文本无时态变化，所以在这方面幸而免于西化。中国文化这么精妙，中文当然不会拙于分别时间之先后。散文里说：「人之将死，其言也善」；「议论未定，而兵已渡河。」诗里说：「已凉天气未寒时」。这里面的时态够清楚的了。苏轼的七绝：「荷尽已无擎雨盖，菊残犹有傲霜枝。一年好景君须记，最是橙黄橘绿时。」里面的时序，有已逝，有将逝，更有正在发生，区别得准确而精细。</p> <p>中文的动词既然不便西化，一般人最多也只能写出「我们将要开始比赛了」之类的句子，问题并不严重。动词西化的危机另有两端：一是单纯动词分解为「弱动词 + 抽象名词」的复合动词，前文已经说过。不说「一架客机失事，死了九十八人」，却说「一架客机失事，造成九十八人死亡」，实在是迂回作态。另一端是采用被动词语气。凡是及物动词，莫不发于施者而及于受者。所以用及物动词叙述一件事，不出下列三种方式：</p> <blockquote> <p>(一) 哥伦布发现了新大陆。</p> <p>(二) 新大陆被哥伦布发现了。</p> <p>(三) 新大陆被发现了。</p> </blockquote> <p>第一句施者做主词，乃主动语气。第二句受者做主词，乃被动语气。第三句仍是受者做主词，仍是被动，却不见施者。这三种句子在英文里都很普遍，但在中文里却以第一种最常见，第二、第三种就少得多。第三种在中文里常变成主动语气，例如「糖都吃光了」，「戏看完了」，「稿写了一半」，「钱已经用了」。</p> <p>目前西化的趋势，是在原来可以用主动语气的场合改用被动语气。请看下列的例句</p> <blockquote> <p>(一) 我不会被你这句话吓倒。</p> <p>(二) 他被怀疑偷东西。</p> <p>(三) 他这意见不被人们接受。</p> <p>(四) 他被升为营长。</p> <p>(五) 他不被准许入学。</p> </blockquote> <p>这些话都失之生硬，违反了中文的生态。其实，我们尽可还原为主动语气如下：</p> <blockquote> <p>(一) 你这句话吓不倒我。</p> <p>(二) 他有偷东西的嫌疑。</p> <p>(三) 他这意见大家都不接受。</p> <p>(四) 他升为营长。</p> <p>(五) 他未获准入学。</p> </blockquote> <p>同样，「他被选为议长」不如「他当选为议长」。「他被指出许多错误」也不如「有人指出他许多错误」。「他常被询及该案的真相」也不如「常有人问起他该案的真相」。</p> <p>目前中文的被动语气有两个毛病。一个是用生硬的被动语气来取代自然的主动语气。另一个是千篇一律只会用「被」字，似乎因为它发音近于英文的 by，却不解从「受难」到「遇害」，从「挨打」到「遭殃」，从「轻人指点」到「为世所重」，可用的字还有许多，不必套一个公式。</p> <h2 id="八">八</h2> <p>中文的西化有重有轻，有暗有明，但其范围愈益扩大，其现象愈益昭彰，颇有加速之势。以上仅就名词、连接词、介词、副词、形容词、动词等西化之病稍加分析，希望读者能举一反三，知所防范。</p> <p>常有乐观的人士说，语言是活的，有如河流，不能阻其前进，所谓西化乃必然趋势。语言诚然是活的，但应该活得健康，不应带病延年。至于河流的比喻，也不能忘了两岸，否则泛滥也会成灾。西化的趋势当然也无可避免，但不宜太快、太甚，应该截长补短，而非以短害长。</p> <p>颇有前卫作家不以杞人之忧为然，认为坚持中文的常规，会妨碍作家的创新。这句话我十分同情，因为我也是「过来人」了。「语法岂为我辈而设哉！」诗人本有越界的自由。我在本文强调中文的生态，原为一般写作说法，无意规范文学的创作。前卫作家大可放心去追逐缪思，不用碍手碍脚，作语法之奴。</p> <p>不过有一点不可不知。中文发展了好几千年，从清通到高妙，自有千锤百炼的一套常态。谁要是不知常态为何物而贸然自诩为求变，其结果也许只是献拙，而非生巧。变化之妙，要有常态衬托才显得出来。一旦常态不存，余下的只是乱，不是变了。</p>]]></content><author><name></name></author><category term="Writing"/><category term="Chinese"/><category term="Expression"/><category term="Article"/><summary type="html"><![CDATA[剪辑自余光中先生的文章「中文的常态与变态」，并不代表完全认同其所有观点]]></summary></entry><entry><title type="html">信息时代是平庸者的坟墓</title><link href="https://waynehsucn.github.io//blog/2024/%E4%BF%A1%E6%81%AF%E6%97%B6%E4%BB%A3%E6%98%AF%E5%B9%B3%E5%BA%B8%E8%80%85%E7%9A%84%E5%9D%9F%E5%A2%93/" rel="alternate" type="text/html" title="信息时代是平庸者的坟墓"/><published>2024-11-20T20:15:23+00:00</published><updated>2024-11-20T20:15:23+00:00</updated><id>https://waynehsucn.github.io//blog/2024/%E4%BF%A1%E6%81%AF%E6%97%B6%E4%BB%A3%E6%98%AF%E5%B9%B3%E5%BA%B8%E8%80%85%E7%9A%84%E5%9D%9F%E5%A2%93</id><content type="html" xml:base="https://waynehsucn.github.io//blog/2024/%E4%BF%A1%E6%81%AF%E6%97%B6%E4%BB%A3%E6%98%AF%E5%B9%B3%E5%BA%B8%E8%80%85%E7%9A%84%E5%9D%9F%E5%A2%93/"><![CDATA[<blockquote> <p>剪辑自 <a href="https://www.nytimes.com/2012/01/25/opinion/friedman-average-is-over.html">Average Is Over</a></p> </blockquote> <p>在《大西洋月刊》最新一期中，亚当·戴维森（Adam Davidson）发表了一篇题为《在美国成功》（Making It in America）的文章，其中提到一个来自棉花种植区的笑话，生动地说明了现代纺织厂的高度自动化：如今，平均每家纺织厂只有两名员工，「一个人和一条狗。那个人的职责是喂狗，而狗的职责是防止那个人靠近机器。」</p> <p>戴维森的文章是最近众多讨论失业率居高不下和中产阶级收入下降原因的文章之一。这些文章普遍认为，当前的这些经济困境主要归因于大衰退导致的需求大幅下降，但也不可忽视全球化和信息技术革命的飞跃性进步。正是这些进步以前所未有的速度，用机器或海外劳动力替代了本地劳动者。</p> <p>过去，拥有普通技能、从事普通工作的工人，能够过上普通的生活。但如今，「普通」已经正式不再奏效了。仅仅是普通，已经无法为你带来过去的那种收入，尤其在现在这个时代，越来越多的雇主能够轻松获得大量高水平且廉价的外国劳动力、廉价的机器人、廉价的软件、廉价的自动化技术和廉价的天才人才。因此，每个人都需要找到自己的「额外价值」——即在其职业领域中让自己脱颖而出的独特价值贡献。「普通」时代已经结束了。</p> <p>是的，新技术一直在取代工作岗位，并且这种趋势将永远持续下去。正如人们常说的那样，如果马可以投票，汽车可能永远都不会出现。然而，这种趋势近年来正在加速发展。正如戴维森指出的那样：「在截至 2009 年的十年间，美国工厂裁员的速度如此之快，以至于几乎抹去了过去 70 年的所有就业增长；大约每三个制造业岗位中就有一个消失，总数约为 600 万个。」</p> <p>而这还只是冰山一角。去年 4 月，Slate 的安妮·洛瑞（Annie Lowrey）报道了一家名为「E la Carte」的初创公司，该公司致力于减少对服务员的需求。文章提到，这家公司「开发了一种增强版的 iPad，让顾客可以直接在餐桌上点单和支付。这项被称为‘Presto’的巧妙发明，是一群麻省理工学院工程师的创意结晶，很快可能会出现在你附近的餐厅中。……顾客可以选择自己想吃的菜品并将其添加到购物车中。根据餐厅的设置，设备还可以显示营养信息、成分表和菜品照片。你还可以提出特别要求，比如‘酱料放旁边’或者‘五倍培根’。完成点单后，订单会直接传送到厨房，而 Presto 会告诉你餐点需要多长时间准备。……觉得和同伴聊得无聊？可以在机器上玩游戏。用餐结束后，你可以直接在设备上结账，甚至可以逐项分摊账单，并选择任何你喜欢的支付方式。还可以选择将收据通过电子邮件发送给自己。……每台设备的租金为每月 100 美元。如果一家餐厅每天营业 8 小时、一周 7 天，那么每小时每张桌子的成本仅为 42 美分——比最便宜的服务员还便宜。」</p> <p>当 iPad 无法以超越平均水平的方式完成某些工作时，一个中国工人就会顶上。《纽约时报》在周日刊登了一篇由查尔斯·杜希格（Charles Duhigg）和基思·布拉德舍尔（Keith Bradsher）撰写的精彩文章，探讨了苹果为何将如此多的制造环节放在中国。在文章中，有这样一段描述：</p> <p>「苹果在最后一刻重新设计了 iPhone 的屏幕，迫使生产线进行全面调整。新的屏幕在午夜前后运抵位于中国工厂的仓库。一名主管立即唤醒了住在公司宿舍的 8000 名工人。每名员工都被分发了一块饼干和一杯茶，然后被带到工作岗位上，并在半小时内开始了为期 12 小时的轮班，负责将玻璃屏幕装配到带斜边的框架中。96 小时内，这家工厂每天就能生产超过 1 万部 iPhone。一位高管表示：‘这种速度和灵活性令人叹为观止。没有任何一家美国工厂能与之相比。’」</p> <p>自动化不仅仅局限于制造业，它正在渗透到更多领域。正如硅谷创意实验室 SRI International 的首席执行官柯蒂斯·卡尔森（Curtis Carlson）所解释的，这家实验室正是发明苹果 iPhone 数字个人助理程序 Siri 的地方。他表示：「Siri 只是一个开端，它标志着我们与银行、保险公司、零售商店、医疗服务提供商、信息检索服务和产品服务互动方式的巨大变革的开始。」</p> <p>变革将永远存在——新的工作、新的产品和新的服务将不断涌现。但我们可以确定的一点是，随着全球化和信息技术革命的每一次推进，最好的工作将需要劳动者拥有更高水平和更优质的教育，使自己能够超越平均水平。</p> <p>以下是美国劳工统计局（Bureau of Labor Statistics）提供的最新失业率数据，针对 25 岁以上的美国人：</p> <ul> <li>没有高中学历的人：13.8%；</li> <li>拥有高中学历但未接受大学教育的人：8.7%；</li> <li>上过一些大学或获得副学士学位的人：7.7%；</li> <li>拥有学士学位或更高学历的人：4.1%。</li> </ul> <p>在一个「普通」已经不再适用的世界里，我们需要采取多种措施来巩固就业，但最重要的一件事莫过于制定某种适合 21 世纪的「退伍军人法案」（G.I. Bill）。这种新法案应确保每个美国人都能获得高中以后的教育机会。</p> <hr/> <blockquote> <p>在信息技术飞速发展的浪潮中，「普通」已成为无法立足的过往代名词。这个时代，不再奖励平庸的重复，而是推崇创新、适应与差异化。全球化和自动化正以前所未有的速度重塑劳动市场，淘汰标准化技能，迫使每个人寻找独特的价值贡献。教育不再是锦上添花，而是生存的必要条件；学习不再是阶段性的任务，而是贯穿一生的使命。在这个时代，唯有超越「普通」，才能在不确定的未来中找到确定的方向。</p> </blockquote>]]></content><author><name></name></author><category term="Life"/><category term="Blogging"/><category term="Thoughts"/><category term="Discussion"/><summary type="html"><![CDATA[Average Is Over]]></summary></entry><entry><title type="html">多设备项目代码同步</title><link href="https://waynehsucn.github.io//blog/2024/%E5%9F%BA%E4%BA%8EVHDX%E7%9A%84%E5%A4%9A%E8%AE%BE%E5%A4%87%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5/" rel="alternate" type="text/html" title="多设备项目代码同步"/><published>2024-11-05T17:26:00+00:00</published><updated>2024-11-05T17:26:00+00:00</updated><id>https://waynehsucn.github.io//blog/2024/%E5%9F%BA%E4%BA%8EVHDX%E7%9A%84%E5%A4%9A%E8%AE%BE%E5%A4%87%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5</id><content type="html" xml:base="https://waynehsucn.github.io//blog/2024/%E5%9F%BA%E4%BA%8EVHDX%E7%9A%84%E5%A4%9A%E8%AE%BE%E5%A4%87%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5/"><![CDATA[<p>先讲需求。我有 4 台电脑，按使用频率排序分别是台式电脑、联想笔记本、微软 Surface Pro7 和迷你主机。台式机占据了 95% 的使用时间，用于日常办公和开发；迷你主机用于长时间运行且低性能要求的任务；笔记本和 Surface 则用于外出携带。为了实现跨设备的无缝工作流，需要高效同步代码和文件。</p> <p>目前，OneDrive 已完全满足除代码外的文件实时同步需求，特别是在 Windows 11 环境下。但代码同步始终存在问题。</p> <hr/> <h2 id="onedrive-同步代码的局限">OneDrive 同步代码的局限</h2> <p>我的代码分为两类备份：</p> <ul> <li><strong>Code</strong>文件夹：存储零散的原型代码，OneDrive 同步表现良好。</li> <li><strong>CodeSpace</strong>文件夹：存储系统性项目代码，包括科研原型、小型项目和开源代码。这类代码同步存在以下问题： <ul> <li><strong>同步慢</strong>。JavaScript/TypeScript 的<code class="language-plaintext highlighter-rouge">node_modules</code> 文件夹往往巨大且文件层级深，这会让云盘同步机制捉襟见肘。每个小文件都需要单独上传、处理和版本控制。</li> <li><strong>冲突多</strong>。当在多设备间频繁切换修改时，文件锁和冲突的概率大幅提升。OneDrive 会生成文件名 - 冲突副本，而我还需要花时间手动对比和解决。</li> <li><strong>完整性风险</strong>。在频繁修改的开发场景下，云盘可能因为未完成同步或网络中断导致文件损坏。直接同步源码文件容易出现版本冲突问题，特别是当多个设备同时访问和编辑代码时。</li> <li><strong>环境依赖问题</strong>。将代码直接放在云盘，只解决了代码的「搬运」问题，但没有解决运行环境的迁移。切换设备后，仍需手动重建环境、安装依赖库等。</li> </ul> </li> </ul> <p>同步网盘，比如坚果云官方建议，不要使用坚果云同步代码，用 git。但 git 是版本控制工具，又不是同步工具，代码可以托管平台，但快速迭代中频繁 push/pull 既麻烦又低效。同时，项目临时文件无法轻松清理，增加版本库体积。这些所有问题在我快速迭代代码或者开发大型项目时尤其明显。因此，现有方案无法满足 <strong>CodeSpace</strong> 文件夹的复杂需求，亟需新的同步方案。</p> <hr/> <h2 id="选择-vhdx--云盘同步动机">选择 VHDX + 云盘同步动机</h2> <p>VHDX 是一种虚拟硬盘文件，可以把它看作一个独立的硬盘设备。把项目的所有代码、依赖环境和一些开发工具（比如常用的脚本和测试数据）都存放在 VHDX 文件里。这样，所有内容都集中在一个文件中，从而实现以下效果：</p> <ul> <li>避免同步大量小文件的低效问题，只需同步一个大文件。</li> <li>所有代码和相关依赖都存储在 VHDX 中，无需担心遗漏关键文件。</li> <li>VHDX 的整体备份非常方便，可以直接复制到外部硬盘或另一个云盘服务。</li> <li>VHDX 本质上是虚拟硬盘，可以用作块存储的抽象层，持差分磁盘文件，这使得它可以结合块级同步技术，例如存储级快照和增量同步</li> <li>VHDX 可以存放任何特定于项目的目录、文件和包缓存。在你切换设备时，只需挂载同步好的 VHDX 文件，设置相同的盘符和缓存路径（如 npm、pip），即可获得完整的项目和环境，无需重新安装依赖。</li> <li>VHDX 支持动态扩展，随着数据被写入磁盘，虚拟硬盘文件会增长到其最大大小。</li> <li>VHDX 支持最大 64 TB，并针对因停电等问题导致的意外 IO 故障提供更具弹性的保护。</li> <li>如果项目发生严重问题，可以通过 OneDrive 的历史版本功能恢复 VHDX 文件的任意版本。</li> </ul> <p>比如 VHDX 驱动器的目录结构可以设计成：</p> <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">X</span><span class="o">:</span>\
<span class="nf">├── PythonProjects</span>\
<span class="nf">│   ├── ProjectA</span>\
<span class="nf">│   ├── ProjectB</span>\
<span class="nf">│   └── VirtualEnvs</span>\
<span class="nf">├── JuliaProjects</span>\
<span class="nf">│   ├── ResearchProject</span>\
<span class="nf">│   └── SharedPackages</span>\
<span class="nf">├── JavaScriptProjects</span>\
<span class="nf">│   ├── FrontendApp</span>\
<span class="nf">│   ├── NodeModules</span>\
<span class="nf">│   └── Utils</span>\
<span class="nf">├── Tools</span>\
<span class="nf">│   ├── Scripts</span>\
<span class="nf">│   └── Templates</span>\
<span class="nf">└── packages</span>\
<span class="nf">    ├── nodejs</span>\
<span class="nf">    ├── npm</span>\
<span class="nf">    └── pip</span>\
</code></pre></div></div> <h2 id="实际使用">实际使用</h2> <p>Windows 11 新增的开发人员驱动器是一种新形式的存储卷，可用于提高关键开发人员工作负荷的性能。开发人员驱动器在 ReFS 技术基础上构建，采用有针对性的文件系统优化，并且可以更好地控制存储卷设置和安全性，包括信任指定、防病毒配置和对附加筛选器的管理控制。</p> <p>Windows 设置并导航到系统&gt;存储&gt;高级存储设置&gt;磁盘和卷。可以选择创建开发人员驱动器。系统会提供三个选项：</p> <ul> <li><strong>创建新的 VHD</strong> - 在新的虚拟硬盘上生成卷</li> <li><strong>调整现有卷的大小</strong> - 创建新的未分配空间以进行构建</li> <li><strong>磁盘上的未分配空间</strong> - 使用现有磁盘上的未分配空间。仅当之前在存储中设置了未分配的空间时，才会显示此选项。</li> </ul> <p>因此，在 Windows 11 中，可以方便的利用开发人员驱动器创建 VHDX。</p> <p>虽然由于管理虚拟磁盘层的开销，将开发人员驱动器存储在虚拟硬盘 (VHD) 中可能会稍微降低性能。权衡的是，VHD 可以选择格式为 VHDX，为动态调整大小（如果需要高效管理磁盘空间）、移动或备份数据提供了更大的灵活性。VHD 也高度可移植，允许将 VHD 文件传输到其他计算机或备份位置。具体创建 VHDX 的过程不再描述，<a href="https://learn.microsoft.com/zh-cn/windows/dev-drive/">Windows Learn</a>的讲解简洁明了。</p> <h2 id="很烦">很烦</h2> <p>项目一多 VHDX 占用空间就会很大，而 OneDrive 每次同步 VHDX 时都是全量的，没法增量同步。</p> <p>考虑到出门基本不会高强度迭代代码，就仅当弄了个新方案来备份项目代码。</p> <blockquote> <p>2024.12.15 我当时就是个傻逼，这玩意对我没什么用处，还浪费大半天时间了解，我是在哪儿看到 VHDX 可以增量备份的，nmd</p> </blockquote>]]></content><author><name></name></author><category term="Productivity"/><category term="VHDX"/><category term="CodeSync"/><summary type="html"><![CDATA[基于 VHDX 和同步盘的多设备的代码同步方案]]></summary></entry><entry><title type="html">工作环境系统实用配置记录</title><link href="https://waynehsucn.github.io//blog/2024/%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/" rel="alternate" type="text/html" title="工作环境系统实用配置记录"/><published>2024-09-24T19:36:53+00:00</published><updated>2024-09-24T19:36:53+00:00</updated><id>https://waynehsucn.github.io//blog/2024/%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95</id><content type="html" xml:base="https://waynehsucn.github.io//blog/2024/%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"><![CDATA[<h3 id="scoop-包管理器">Scoop 包管理器</h3> <p><a href="https://scoop.sh/">Scoop</a> 是我在 Windows 平台上最顺手的软件（包）管理器，可以很方便的在命令行中安装我的熟悉的软件。它有以下特点：</p> <ul> <li>消除权限弹出窗口</li> <li>防止安装大量程序导致的 PATH 污染</li> <li>避免安装和卸载程序时出现意外的副作用</li> <li>自动查找并安装依赖项</li> <li>自动执行所有额外的设置步骤以获得一个可运行的程序</li> </ul> <p>我可以用它简单且直接的安装 oh-my-posh、nodejs、pipx、ffmpeg、7zip、aria2、fastfetch 等一系列小程序，仅需要以下命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scoop <span class="nb">install </span>nodejs-lts
</code></pre></div></div> <p>甚至可以用它安装 VS Code（需要添加 extras buckets）:</p> <pre><code class="language-poershell">scoop bucket add extras
scoop install vscode
</code></pre> <p>安装 nerd fonts 系列的字体（需要添加 nerd-fonts buckets）:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scoop bucket add nerd-fonts
scoop <span class="nb">install </span>Cascadia-Code
</code></pre></div></div> <p>需要注意，使用 Scoop 管理工具时，Scoop 会将已安装的多个版本的应用保存在各自的文件夹中，以便随时切换和回退到以前的版本。</p> <p>例如，可以通过文件管理器直接查看<code class="language-plaintext highlighter-rouge">C:\Users\Xu\scoop\apps\oh-my-posh</code>文件夹，里面应该有多个以版本号命名的子文件夹。当前激活的版本会显示在<code class="language-plaintext highlighter-rouge">current</code>目录中。可以通过文件管理器查看<code class="language-plaintext highlighter-rouge">C:\Users\Xu\scoop\apps\oh-my-posh\current</code>是指向哪个版本的符号链接。</p> <p>手动删除不需要的旧版本子文件夹。例如，如果看到有 7.68.0 和 7.69.1 两个文件夹，而只想保留最新的 7.69，可以进入<code class="language-plaintext highlighter-rouge">C:\Users\Xu\scoop\apps\oh-my-posh</code>目录 删除旧版本文件夹（如 7.68.0）。或者直接使用命令自动清理未使用的旧版本文件：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scoop cleanup oh-my-posh
scoop cleanup <span class="nt">--all</span>
</code></pre></div></div> <p>这样，每次更新后 Scoop 会自动删除旧版本。</p> <p>附上我使用 scoop 安装的软件：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Name                   Version            Source Updated             Info
<span class="nt">----</span>                   <span class="nt">-------</span>            <span class="nt">------</span> <span class="nt">-------</span>             <span class="nt">----</span>
7zip                   24.09              main   2024-12-02 16:34:26
aria2                  1.37.0-1           main   2024-11-11 21:58:04
btop                   1.0.4              main   2024-07-17 21:29:16
btop-lhm               1.0.4              main   2024-07-17 21:29:25
draw.io                25.0.2             extras 2024-12-05 15:24:34
everything             1.4.1.1026         extras 2024-12-04 14:25:38
fastfetch              2.33.0             main   2024-12-28 23:17:29
fd                     10.2.0             main   2024-12-22 12:47:35
ffmpeg                 7.1                main   2024-10-20 18:21:52
fzf                    0.57.0             main   2024-12-22 12:47:39
geekuninstaller        1.5.2.165          extras 2024-12-03 16:21:50
gh                     2.64.0             main   2024-12-22 12:57:21
ghostscript            10.04.0            main   2024-12-22 12:49:34
git                    2.47.1             main   2024-12-02 16:46:01
imagemagick            7.1.1-43           main   2024-12-25 22:26:47
innounp                1.76               main   2024-11-14 10:58:02
jid                    0.7.6              main   2024-12-22 12:49:50
jq                     1.7.1              main   2024-12-22 12:47:28
mingw                  14.2.0-rt_v12-rev0 main   2024-12-05 15:37:08
mongodb                8.0.4              main   2024-12-08 12:22:01
mongodb-compass        1.45.0             extras 2024-12-05 15:24:52
mongodb-database-tools 100.10.0           main   2024-12-02 17:10:50
mongosh                2.3.7              extras 2024-12-22 12:57:28
motrix                 1.8.19             extras 2024-12-02 17:45:13
nodejs-lts             22.12.0            main   2024-12-05 15:25:03
notepad3               6.24.1221.1        extras 2024-12-22 12:59:44
office-tool-plus       10.19.8.0          extras 2024-12-22 12:59:49
oh-my-posh             24.17.1            main   2024-12-25 22:26:58
openjdk21              21.0.2-13          java   2024-12-05 15:46:33
pandoc                 3.6.1              main   2024-12-25 22:27:12
picgo                  2.3.1              extras 2024-12-02 17:32:48
pipx                   1.7.1              main   2024-12-13 20:38:34
pnpm                   9.15.2             main   2024-12-28 23:17:37
poppler                24.08.0-0          main   2024-12-22 12:47:32
r                      4.4.2              main   2024-12-02 16:39:04
registry-finder        2.59.0.0           extras 2024-12-04 14:15:35
ripgrep                14.1.1             main   2024-12-22 12:47:37
rstudio                2024.12.0-467      extras 2024-12-22 13:00:34
rtools                 4.4.6335.6327      main   2024-12-02 14:16:57
<span class="nb">sudo                   </span>0.2020.01.26       main   2024-09-30 13:16:29
switchhosts            4.2.0.6119         extras 2024-12-02 17:38:16
texstudio              4.8.5              extras 2024-12-14 16:06:48
thorium                128.0.6613.189     extras 2024-12-02 17:36:29
typst                  0.12.0             main   2024-12-05 15:34:13
vcredist2022           14.42.34433.0      extras 2024-12-02 16:56:57
wixtoolset             5.0.2              main   2024-11-14 10:57:52
zoxide                 0.9.6              main   2024-12-22 12:47:42
</code></pre></div></div> <h3 id="fonts">Fonts</h3> <ul> <li>Powershell: ‘CaskaydiaMonoNerdFontMono’</li> <li>VS Code: ‘CaskaydiaMonoNerdFontMono’（英文）, ‘LXGW WenKai Mono’（中文）</li> <li>Office Word: ‘latinmodern-math’ （数学公式）。</li> </ul> <h3 id="nodejs">Node.js</h3> <h4 id="镜像源管理工具-nrm">镜像源管理工具 nrm</h4> <ul> <li>nrm 是一个 npm registry manager，可以帮助用户更方便地管理不同的镜像源。以下是 nrm 的基本使用方式：</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 安装nrm</span>
npm <span class="nb">install </span>nrm <span class="nt">-g</span>
<span class="c"># 列出所有配置的镜像源</span>
nrm <span class="nb">ls</span>
<span class="c"># 添加新的镜像源</span>
nrm add &lt;registry-name&gt; &lt;registry-url&gt;
<span class="c"># 删除镜像源</span>
nrm del &lt;registry-name&gt;
<span class="c"># 切换当前使用的镜像源</span>
nrm use &lt;registry-name&gt;
<span class="c"># 测试所有镜像源的速度</span>
nrm <span class="nb">test</span>
</code></pre></div></div> <h3 id="mongodb">MongoDB</h3> <h4 id="安装">安装</h4> <p>利用 scoop 自动安装 mongodb 及其一系列工具：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scoop bucket add main
scoop <span class="nb">install </span>main/mongodb
scoop <span class="nb">install </span>main/mongodb-database-tools

scoop bucket add extras
scoop <span class="nb">install </span>extras/mongosh
scoop <span class="nb">install </span>extras/mongodb-compass
</code></pre></div></div> <h4 id="配置">配置</h4> <p>通过 Scoop 安装的 MongoDB 默认不会配置为 Windows 服务，但可以手动设置 MongoDB 作为 Windows 服务来实现开机自启。</p> <p>使用 Scoop 检查 MongoDB 安装位置：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scoop prefix mongodb
</code></pre></div></div> <p>mongod shim 使用<code class="language-plaintext highlighter-rouge">$dir\bin\mongod.cfg</code>作为默认配置文件。要使用其他配置文件，请运行<code class="language-plaintext highlighter-rouge">$dir\bin\mongod.exe --config NEW_CONFIG_FILE</code>，<code class="language-plaintext highlighter-rouge">NEW_CONFIG_FILE</code>可以基于<code class="language-plaintext highlighter-rouge">mongod.cfg</code>进行修改，并存放在其他位置。</p> <p>手动启动 MongoDB，如果未创建<code class="language-plaintext highlighter-rouge">data\db</code>和<code class="language-plaintext highlighter-rouge">data\log</code>文件夹（路径可以在<code class="language-plaintext highlighter-rouge">mongod.cfg</code>中固定设置），请先手动创建：：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;路径&gt;<span class="se">\b</span><span class="k">in</span><span class="se">\m</span>ongod.exe <span class="nt">--dbpath</span> <span class="s2">"&lt;路径&gt;</span><span class="se">\d</span><span class="s2">ata</span><span class="se">\d</span><span class="s2">b"</span> <span class="nt">--logpath</span> <span class="s2">"&lt;路径&gt;</span><span class="se">\d</span><span class="s2">ata</span><span class="se">\l</span><span class="s2">og</span><span class="se">\m</span><span class="s2">ongo.log"</span> <span class="nt">--logappend</span>
</code></pre></div></div> <p>打开一个新终端，验证 MongoDB 是否正常启动：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mongosh
</code></pre></div></div> <p>注册 MongoDB 为 Windows 服务：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sc.exe create MongoDB <span class="nv">binPath</span><span class="o">=</span> <span class="s2">"&lt;路径&gt;</span><span class="se">\b</span><span class="s2">in</span><span class="se">\m</span><span class="s2">ongod.exe --service --config &lt;路径&gt;</span><span class="se">\m</span><span class="s2">ongod.cfg"</span> <span class="nv">DisplayName</span><span class="o">=</span> <span class="s2">"MongoDB"</span> <span class="nv">start</span><span class="o">=</span> <span class="s2">"auto"</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">&lt;路径&gt;</code>：Scoop 安装的 MongoDB 路径。</li> <li><code class="language-plaintext highlighter-rouge">--service</code>：指定以服务模式运行。</li> <li><code class="language-plaintext highlighter-rouge">--config</code>：指定 MongoDB 的配置文件路径（可选）。</li> </ul> <p>启动 MongoDB 服务，如果服务启动成功，MongoDB 将在每次系统启动时自动运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net start MongoDB
</code></pre></div></div> <h3 id="工具列表">工具列表</h3> <ul> <li> <p><strong>代码：</strong> Visual Studio Code，Docker Desktop，<a href="https://github.com/WinMerge/winmerge/releases">WinMerge</a>（差异文件比较），Navicat Premium，PyCharm，WebStorm，StataMP 18，Rstudio，R，Git，Gurobi，Origin，MATLAB，<a href="https://github.com/conda-forge/miniforge">Miniforge3</a>，<a href="https://mirrors.tuna.tsinghua.edu.cn/#">TexLive</a>，<a href="https://mirrors.tuna.tsinghua.edu.cn/#">TeXstudio</a>（Latex 编辑器），<a href="https://github.com/typst/typst">Typst</a>（类 Tex）</p> </li> <li><strong>办公工具：</strong><a href="https://www.zotero.org/">Zotero</a>（文献管理），<a href="https://simpletex.cn/">Simple Tex</a>（公式识别），<a href="https://dict.eudic.net/">欧路词典</a>， <a href="https://typoraio.cn/">Typora</a>，<a href="https://b3log.org/siyuan/download.html">SiYuan</a>，<a href="https://www.office.com/">Office 365</a>，<a href="https://www.microsoft.com/zh-cn/microsoft-365/visio/flowchart-software?msockid=2ac09e93141c66d8007b8af415ee6705">Visio</a>，<a href="https://www.drawio.com/">Draw.io</a>，<a href="https://dashi.163.com/index.html">网易邮箱大师</a>，<a href="https://github.com/stevencohn/OneMore">OneMore</a></li> <li><strong>Windows 工具</strong>：<a href="https://docs.microsoft.com/en-us/windows/powertoys/install">PowerToys</a>（Windows 工具集），<a href="https://twinkletray.com/">Twinkle Tray</a>（多显示器控制），<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGO</a>（图床），<a href="https://geekuninstaller.com/">Geek Uninstaller</a>（干净卸载软件）、<a href="https://www.internetdownloadmanager.com/">IDM</a>（下载），Adobe Acrobat DC（PDF 编辑器），<a href="https://github.com/clashdownload/Clash">Clash</a>，<a href="https://www.google.com/intl/zh-CN/chrome/">Google Chrome</a>，<a href="https://www.microsoft.com/zh-cn/edge/download">Microsoft Edge</a>，<a href="https://github.com/M2Team/NanaZip">Nanazip</a>（解压缩），<a href="https://apps.microsoft.com/detail/9n0866fs04w8?hl=zh-cn&amp;gl=CN">Dolby Access</a>，<a href="https://thorium.rocks/">Thorium</a>（编译器优化版高性能 Chromium）</li> <li><strong>效率工具</strong>：<a href="https://www.voidtools.com/zh-cn/downloads/">Everything</a>（文件搜索），<a href="https://u.tools">uTools</a>（快速启动工具平台），<a href="https://pixpinapp.com/">PixPin</a>（截图），<a href="http://1218.io/">Seer</a>（预览）， <a href="https://xmind.cn/">Xmind</a>（思维导图），<a href="https://www.coodesker.com/">Coodesker</a>（桌面整理），<a href="https://www.bandicam.com/downloads/">Bandicam</a>（录屏）</li> <li><strong>网盘存储：</strong> <a href="https://www.microsoft.com/en-sg/microsoft-365/onedrive/online-cloud-storage">OneDrive</a>，<a href="https://pan.baidu.com/">百度网盘</a>， <a href="https://www.aliyundrive.com/download">阿里云盘</a>，<a href="https://infini-cloud.net/en/index.html">InfiniCloud</a></li> <li><strong>影音娱乐：</strong> <a href="https://potplayer.daum.net/">Potplayer</a>、<a href="https://music.163.com/">网易云音乐</a>，<a href="https://www.bilibili.com/">哔哩哔哩</a>，<a href="https://store.steampowered.com/">Steam</a>，<a href="https://www.epicgames.com">Epic</a>，<a href="https://uu.163.com/">UU 加速器</a>，<a href="https://yuzu-mirror.github.io/">Yuzu</a>，<a href="https://www.leigod.com/">雷神加速器</a>，<a href="https://github.com/Blinue/Magpie">Magpie</a>（强制全屏）</li> </ul>]]></content><author><name></name></author><category term="Productivity"/><category term="Windows"/><category term="Ubuntu"/><category term="Configuration"/><summary type="html"><![CDATA[工作环境的各类实用配置记录]]></summary></entry><entry><title type="html">部署用于学术研究的 Linux 服务器</title><link href="https://waynehsucn.github.io//blog/2024/%E9%83%A8%E7%BD%B2%E7%94%A8%E4%BA%8E%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E7%9A%84Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/" rel="alternate" type="text/html" title="部署用于学术研究的 Linux 服务器"/><published>2024-08-24T14:34:28+00:00</published><updated>2024-08-24T14:34:28+00:00</updated><id>https://waynehsucn.github.io//blog/2024/%E9%83%A8%E7%BD%B2%E7%94%A8%E4%BA%8E%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E7%9A%84Linux%E6%9C%8D%E5%8A%A1%E5%99%A8</id><content type="html" xml:base="https://waynehsucn.github.io//blog/2024/%E9%83%A8%E7%BD%B2%E7%94%A8%E4%BA%8E%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E7%9A%84Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"><![CDATA[<p>最近，我将一台 MiniPC 改造为一台基于 Ubuntu 操作系统的服务器，配置它以满足未来研究的潜在需求。</p> <p>鉴于我对 Linux 的了解有限，我花了一些时间学习并尝试完成部署，并记录配置步骤、可能出现的问题及其相应的解决方案。</p> <hr/> <h2 id="在-ubuntu-上创建具有管理员权限的新用户">在 Ubuntu 上创建具有管理员权限的新用户</h2> <p>当使用云服务、供应商提供或者自己配置的 Ubuntu 服务器时，会创建一个默认用户（default User）。通常，这个用户可以通过<code class="language-plaintext highlighter-rouge">sudo</code>命令临时提升权限来执行需要管理员权限的任务，但它本质上仍是一个普通用户（不是管理员账户）。如果需要创建一个拥有相同管理员权限的自定义用户，可以按照以下步骤进行：</p> <h3 id="1-创建新用户并指定主目录登录-shell">1. 创建新用户并指定主目录、登录 shell</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>useradd <span class="nt">-d</span> <span class="s2">"/home/&lt;user_name&gt;"</span> <span class="nt">-m</span> <span class="nt">-s</span> <span class="s2">"/bin/bash"</span> &lt;user_name&gt;
</code></pre></div></div> <p>参数说明：</p> <ul> <li><code class="language-plaintext highlighter-rouge">-d "/home/&lt;user_name&gt;"</code>：设置用户的主目录为 <code class="language-plaintext highlighter-rouge">/home/&lt;user_name&gt;</code>。</li> <li><code class="language-plaintext highlighter-rouge">-m</code>：自动创建主目录。</li> <li><code class="language-plaintext highlighter-rouge">-s "/bin/bash"</code>：指定用户的默认登录 shell 为 <code class="language-plaintext highlighter-rouge">/bin/bash</code>。</li> </ul> <h3 id="2-赋予新用户管理员权限">2. 赋予新用户管理员权限</h3> <p>要创建具有 sudo（管理员）权限的用户，运行以下命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>useradd <span class="nt">-d</span> <span class="s2">"/home/&lt;user_name&gt;"</span> <span class="nt">-m</span> <span class="nt">-s</span> <span class="s2">"/bin/bash"</span> <span class="nt">-G</span> <span class="nb">sudo</span> &lt;user_name&gt;
</code></pre></div></div> <p>其中：</p> <ul> <li><code class="language-plaintext highlighter-rouge">-G sudo</code>：将 <code class="language-plaintext highlighter-rouge">&lt;user_name&gt;</code> 添加到 <code class="language-plaintext highlighter-rouge">sudo</code> 用户组，使其具有管理员权限。</li> </ul> <h3 id="3-设置新用户的密码">3. 设置新用户的密码</h3> <p>新创建的用户默认没有密码。通过以下命令为 <code class="language-plaintext highlighter-rouge">&lt;user_name&gt;</code> 设置密码：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>passwd &lt;user_name&gt;
</code></pre></div></div> <p>运行此命令后，系统将提示输入两次密码。注意，出于安全考虑，在输入密码时不会有任何字符显示（不显示文本或提示符号）。只需输入密码并按 <code class="language-plaintext highlighter-rouge">Enter</code> 确认。</p> <p>通过以上步骤，可以成功创建一个新用户 <code class="language-plaintext highlighter-rouge">&lt;user_name&gt;</code>，该用户具备管理员权限，可以使用 <code class="language-plaintext highlighter-rouge">sudo</code> 执行命令。</p> <hr/> <h2 id="终端命令美化">终端命令美化</h2> <p>好看好用的终端提示符可以增加工作的愉悦感，这里使用<code class="language-plaintext highlighter-rouge">zsh</code>来美化终端，相关操作参考<a href="/blog/2022/Linux实用配置记录/">先前记录</a>。</p> <hr/> <h2 id="启用服务器的远程访问">启用服务器的远程访问</h2> <p>若要实现从非服务器物理位置远程访问 Ubuntu 服务器，可以通过安装并配置 SSH 服务来实现，并进行必要的防火墙配置。</p> <h3 id="1-安装和配置-ssh-服务">1. 安装和配置 SSH 服务</h3> <p>如果只需基本的 SSH 访问，安装<code class="language-plaintext highlighter-rouge">openssh-server</code>并开启 SSH 服务已足够。然而，在更高安全性需求的环境中，可以进一步优化 SSH 的配置文件<code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>openssh-server
</code></pre></div></div> <p>在完成安装后，检查 SSH 服务的状态以确认其正常运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status ssh
</code></pre></div></div> <ul> <li> <p><strong>配置建议</strong>：</p> <ul> <li> <p><strong>禁用 Root 用户直接登录</strong>（推荐）：避免直接以 root 身份登录服务器，增加安全性。在 <code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code> 中找到 <code class="language-plaintext highlighter-rouge">PermitRootLogin</code> 并将其设置为 <code class="language-plaintext highlighter-rouge">no</code>。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/ssh/sshd_config
</code></pre></div> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PermitRootLogin no
</code></pre></div> </div> </li> <li> <p><strong>限制允许访问的用户</strong>：可以通过 <code class="language-plaintext highlighter-rouge">AllowUsers</code> 配置项指定允许通过 SSH 登录的用户，进一步强化安全性。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AllowUsers &lt;user_name&gt;
</code></pre></div> </div> </li> <li> <p><strong>使用非默认端口</strong>（可选）：将 SSH 端口从默认的 22 改为其他端口，比如 2200。此方法可以减少扫描攻击的可能性，但需同时更新防火墙规则。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Port 2200
</code></pre></div> </div> </li> <li> <p><strong>启用自动断开空闲连接</strong>：为避免未使用的 SSH 会话长期占用资源，可在配置中添加以下行，以设置自动断开空闲连接。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ClientAliveInterval 300
ClientAliveCountMax 2
</code></pre></div> </div> </li> </ul> </li> </ul> <p>更改完成后，重启 SSH 服务以应用配置：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart ssh
</code></pre></div></div> <h3 id="2-配置-ufw-防火墙">2. 配置 UFW 防火墙</h3> <p>如启用了 UFW 防火墙，确保开启 SSH 端口，并根据是否更改了端口号进行相应设置。若使用默认的 22 端口，可以直接使用：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow ssh
</code></pre></div></div> <p>若更改了端口号，如设置为 2200，则需要如下命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow 2200/tcp
</code></pre></div></div> <ul> <li> <p><strong>配置建议：</strong></p> <ul> <li> <p>启用防火墙后，进行状态检查以确保规则正确应用：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw <span class="nb">enable
sudo </span>ufw status
</code></pre></div> </div> </li> </ul> </li> </ul> <h3 id="3-验证-ssh-连接">3. 验证 SSH 连接</h3> <p>在客户端系统（如 Windows）上测试与服务器的连接。Windows 下推荐使用 <a href="https://www.putty.org/">PuTTY</a> 或 <a href="https://aka.ms/terminal">Windows Terminal</a> 等支持 SSH 协议的终端工具，以确保连接的安全性和稳定性。</p> <p>要在 Windows 系统上测试与服务器的远程连接，可以使用 telnet 命令（注意：telnet 常用于测试连接，但生产环境中应使用更安全的 SSH 客户端）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>telnet &lt;remote_ip&gt; &lt;remote_port&gt;
</code></pre></div></div> <p>将 <remote_ip> 替换为服务器的 IP 地址，<remote_port> 替换为服务器监听的 SSH 端口（默认是 22）。</remote_port></remote_ip></p> <h3 id="4-修复-xauthority-文件权限问题">4. 修复 .Xauthority 文件权限问题</h3> <p><code class="language-plaintext highlighter-rouge">/home/&lt;user_name&gt;/.Xauthority</code> 文件权限错误可能是因为在非 root 权限下创建了该文件。除了修改用户目录的所有权外，确保相关 SSH 会话目录的权限也正确：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown</span> &lt;user_name&gt;:&lt;user_name&gt; <span class="nt">-R</span> /home/&lt;user_name&gt;
</code></pre></div></div> <p>若问题仍然存在，可以试试创建一个新的 <code class="language-plaintext highlighter-rouge">.Xauthority</code> 文件：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-u</span> &lt;user_name&gt; <span class="nb">touch</span> /home/&lt;user_name&gt;/.Xauthority
<span class="nb">sudo chown</span> &lt;user_name&gt;:&lt;user_name&gt; /home/&lt;user_name&gt;/.Xauthority
</code></pre></div></div> <h3 id="5-设置-fail2ban推荐">5. 设置 Fail2Ban（推荐）</h3> <p>为了进一步保护 SSH 服务免受暴力破解攻击，可以安装并配置 <code class="language-plaintext highlighter-rouge">fail2ban</code>。该工具会自动检测多次失败的登录尝试，并暂时禁用相应的 IP：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>fail2ban
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">fail2ban</code> 会自动启用 SSH 保护，也可以自定义 <code class="language-plaintext highlighter-rouge">/etc/fail2ban/jail.local</code> 文件以调整禁用时间、重试次数等参数：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[sshd]
enabled = true
port = 22
maxretry = 5
bantime = 600
</code></pre></div></div> <p>Fail2Ban 将自动识别多次失败的登录尝试并禁用相应 IP，从而进一步保障服务器安全。</p> <hr/> <h2 id="配置服务器与-github-的-ssh-连接">配置服务器与 GitHub 的 SSH 连接</h2> <p>以下是将 Ubuntu 服务器与 GitHub 配置为 SSH 连接的详细步骤，确保可以安全地克隆、推送和拉取 GitHub 上的仓库。</p> <h3 id="1-安装并验证-git">1. 安装并验证 Git</h3> <p>首先，安装 Git，并确认安装版本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>git
git <span class="nt">--version</span>
</code></pre></div></div> <h3 id="2-配置-git-用户信息">2. 配置 Git 用户信息</h3> <p>使用 GitHub 用户名和电子邮箱配置 Git。确保填写与 GitHub 账户一致的信息，以便在提交代码时正确记录作者身份：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name <span class="s2">"&lt;github_account_name&gt;"</span>
git config <span class="nt">--global</span> user.email <span class="s2">"&lt;github_account_email&gt;"</span>
</code></pre></div></div> <p>以上配置会添加到 <code class="language-plaintext highlighter-rouge">~/.gitconfig</code> 文件中，是全局设置，即应用于该用户下所有 Git 仓库。</p> <h3 id="3-生成-ssh-密钥对">3. 生成 SSH 密钥对</h3> <p>为了在服务器上与 GitHub 建立安全连接，需要生成 SSH 密钥对：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-C</span> <span class="s2">"&lt;github_account_email&gt;"</span> <span class="nt">-t</span> rsa
</code></pre></div></div> <ul> <li>说明： <ul> <li><code class="language-plaintext highlighter-rouge">-C "&lt;github_account_email&gt;"</code>：为密钥添加注释，一般是 GitHub 账户的邮箱地址。</li> <li><code class="language-plaintext highlighter-rouge">-t rsa</code>：指定密钥类型为 RSA（GitHub 支持的常用类型）。</li> </ul> </li> </ul> <p>运行命令后，按 <code class="language-plaintext highlighter-rouge">Enter</code> 三次（即保持默认文件名 <code class="language-plaintext highlighter-rouge">id_rsa</code> 和默认无密码的设置），密钥对会存储在 <code class="language-plaintext highlighter-rouge">~/.ssh</code> 目录中。</p> <h3 id="4-添加-ssh-公钥到-github">4. 添加 SSH 公钥到 GitHub</h3> <ol> <li> <p>使用以下命令打开生成的公钥文件，并复制其中的内容：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_rsa.pub
</code></pre></div> </div> <p>此命令会将公钥打印在终端上，可以选择性地使用文本编辑器打开并复制（例如使用 <code class="language-plaintext highlighter-rouge">vim ~/.ssh/id_rsa.pub</code>）。</p> </li> <li> <p>登录 GitHub 网站并导航到 <code class="language-plaintext highlighter-rouge">Settings</code> → <code class="language-plaintext highlighter-rouge">SSH and GPG keys</code> → <code class="language-plaintext highlighter-rouge">New SSH key</code>。</p> </li> <li> <p>将 <code class="language-plaintext highlighter-rouge">id_rsa.pub</code> 中的内容粘贴到 <code class="language-plaintext highlighter-rouge">New SSH key</code> 页面，并为此密钥设置一个描述性的名称（如 <code class="language-plaintext highlighter-rouge">Ubuntu Server Key</code>），然后保存。</p> </li> </ol> <h3 id="5-测试与-github-的-ssh-连接">5. 测试与 GitHub 的 SSH 连接</h3> <p>配置完成后，通过以下命令测试与 GitHub 的连接：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@github.com
</code></pre></div></div> <p>执行该命令时，GitHub 会返回一条信息确认连接成功，例如：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi &lt;github_account_name&gt;! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre></div></div> <p>此信息表明 SSH 连接已成功建立，可以在服务器上与 GitHub 进行代码的推送和拉取操作。</p> <h3 id="6-常见问题和解决方法">6. 常见问题和解决方法</h3> <ol> <li> <p><strong>SSH 密钥权限问题</strong>：确保 SSH 密钥对文件的权限正确，以防连接问题。检查和设置密钥的权限：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>600 ~/.ssh/id_rsa
<span class="nb">chmod </span>644 ~/.ssh/id_rsa.pub
</code></pre></div> </div> </li> <li> <p><strong>添加密钥到 SSH Agent</strong>（推荐）：若密钥在服务器启动后未自动加载，可以将其添加到 SSH Agent，以便每次重启后自动加载：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>ssh-agent <span class="nt">-s</span><span class="si">)</span><span class="s2">"</span>
ssh-add ~/.ssh/id_rsa
</code></pre></div> </div> </li> </ol> <hr/> <h2 id="python-环境配置与管理">Python 环境配置与管理</h2> <hr/> <h3 id="miniforge">Miniforge</h3> <p>在服务器上管理 Python Scientific 环境，我选择轻量、高效的 Miniforge 作为包管理工具，代替 Anaconda。Miniforge 默认配置 conda-forge 频道并集成了 Mamba，为包管理提供了更快的解决方案。下面是安装和配置 Miniforge 以及创建和删除环境的步骤。</p> <h4 id="1-安装-miniforge">1. 安装 Miniforge</h4> <p>首先，按照 <code class="language-plaintext highlighter-rouge">Miniforge</code> 的 <a href="https://github.com/conda-forge/miniforge">GitHub 项目页面</a> 中的安装说明进行下载和安装。以下是核心安装命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="s2">"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-</span><span class="si">$(</span><span class="nb">uname</span><span class="si">)</span><span class="s2">-</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="s2">.sh"</span>
bash Miniforge3-<span class="si">$(</span><span class="nb">uname</span><span class="si">)</span>-<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span>.sh
</code></pre></div></div> <ul> <li> <p>配置建议：</p> <ul> <li>建议将 Miniforge 安装在 <code class="language-plaintext highlighter-rouge">/usr/local/miniforge3</code>，这样可以让多个用户共享环境，但只有 root 用户可以进行修改。安装过程中，可以选择安装目录，系统会自动创建所需文件夹。</li> <li> <p>如果使用 ZSH，应确认 Miniforge 的路径被添加到<code class="language-plaintext highlighter-rouge">.zshrc</code>文件中。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$usr</span><span class="s2">/local/miniforge3/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div> </div> </li> <li>重新加载<code class="language-plaintext highlighter-rouge">.zshrc</code>配置：<code class="language-plaintext highlighter-rouge">source ~/.zshrc</code></li> </ul> </li> </ul> <h4 id="2-初始化-mamba-环境">2. 初始化 Mamba 环境</h4> <p>安装完成后，初始化 Mamba 以便在终端使用该命令。假设 Miniforge 安装在 <code class="language-plaintext highlighter-rouge">/usr/local/miniforge3</code>，执行以下命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/miniforge3/bin/mamba init
</code></pre></div></div> <p>此命令将初始化环境变量，需要重新启动终端以应用更改</p> <p>若使用 ZSH 无法，可以将<code class="language-plaintext highlighter-rouge">.bashrc</code>中的<code class="language-plaintext highlighter-rouge">mamba</code>配置复制到<code class="language-plaintext highlighter-rouge">.zshrc</code>，或者其他方式配置。</p> <h4 id="3-创建和管理环境">3. 创建和管理环境</h4> <p>在多用户服务器环境中，建议使用 root 权限（通过 <code class="language-plaintext highlighter-rouge">sudo su</code> 切换）创建和管理环境。这种方式可以避免普通用户意外或不受控地更改环境配置。</p> <h5 id="创建新环境">创建新环境</h5> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 以指定名称创建新环境</span>
mamba create <span class="nt">--name</span> &lt;new_env_name&gt; <span class="nv">python</span><span class="o">=</span>3.11 <span class="nt">--no-default-packages</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">--name &lt;new_env_name&gt;</code>：为新环境命名。</li> <li><code class="language-plaintext highlighter-rouge">python=3.11</code>：设置 Python 版本为 3.11。</li> <li><code class="language-plaintext highlighter-rouge">--no-default-packages</code>：仅安装 Python，不自动安装其他包。</li> <li>普通用户可以在其主目录中创建私有环境（例如 <code class="language-plaintext highlighter-rouge">/home/username/myenv</code>），执行如下命令：</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mamba create <span class="nt">--prefix</span> /home/username/myenv <span class="nv">python</span><span class="o">=</span>3.11 <span class="nt">--no-default-packages</span>
</code></pre></div></div> <h5 id="删除环境">删除环境</h5> <p>若要删除某个环境（包括所有关联的包），可以使用以下命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 通过环境名称删除</span>
mamba remove <span class="nt">--name</span> &lt;env_name&gt; <span class="nt">--all</span>
<span class="c"># 通过路径删除</span>
mamba remove <span class="nt">--prefix</span> /path/to/directory <span class="nt">--all</span>
</code></pre></div></div> <h4 id="4-安装常用包">4. 安装常用包</h4> <p>通常建议不直接修改 <code class="language-plaintext highlighter-rouge">base</code> 环境，而是根据实际需求创建专门环境。例如，可能需要安装 <code class="language-plaintext highlighter-rouge">JupyterHub</code>，它为多个用户提供 Jupyter notebook 服务。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建 Machine Learning 环境</span>
mamba create <span class="nt">--name</span> ml_env <span class="nv">python</span><span class="o">=</span>3.12 jupyterhub jupyterlab notebook notebook scipy numpy numpy
<span class="c"># 激活环境</span>
mamba activate ml_env
<span class="c"># 下载其他包</span>
mamba <span class="nb">install </span>jupyter-lsp-python jupyterlab-lsp jupyterlab-git jupyterlab_execute_time
</code></pre></div></div> <h4 id="5-防止未经授权的更新">5. 防止未经授权的更新</h4> <p>在多用户环境中，限制普通用户修改系统级环境有助于保持环境的稳定性。如果用户试图更新环境，将会遇到权限不足的错误。示例如下：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mamba update <span class="nt">--all</span>
</code></pre></div></div> <p>错误信息：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>EnvironmentNotWritableError: The current user does not have write permissions to the target environment.
  environment location: /usr/local/miniforge3
  uid: 1000
  gid: 1000
</code></pre></div></div> <p>这种设计可以确保环境的安全和一致性，避免因权限问题导致更新失败。</p> <p>如果需要临时给权限更新<code class="language-plaintext highlighter-rouge">base</code>环境，可以用<code class="language-plaintext highlighter-rouge">sudo</code>命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> /usr/local/miniforge3/bin/mamba update <span class="nt">--all</span>
</code></pre></div></div> <hr/> <h3 id="poetry">Poetry</h3> <p>Poetry 是一种高效、便捷的 Python 项目依赖管理工具，适用于快速创建和管理虚拟环境、安装依赖库以及发布 Python 包。</p> <h4 id="1-安装-poetry">1. 安装 Poetry</h4> <p>在安装 Poetry 前，应确保已安装 Python 3.7 以上版本。</p> <ol> <li> <p>使用官方安装脚本：</p> <p>Poetry 的安装脚本可以自动将 Poetry 安装在 <code class="language-plaintext highlighter-rouge">$HOME/.local/bin</code> 目录下。运行以下命令下载并执行安装脚本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-sSL</span> https://install.python-poetry.org | python3 -
</code></pre></div> </div> </li> <li> <p>将 Poetry 添加到 PATH：</p> <p>默认安装完成后，需要将 Poetry 添加到环境变量中。如果出现 <code class="language-plaintext highlighter-rouge">command not found</code> 错误，可以通过以下命令将其添加到当前会话的环境变量中：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.local/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div> </div> </li> <li> <p>验证安装：</p> <p>安装完成后，可以通过以下命令检查安装版本，确认安装是否成功：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nt">--version</span>
</code></pre></div> </div> </li> </ol> <h4 id="2-创建新项目">2. 创建新项目</h4> <p>Poetry 提供了简化的命令来快速生成新项目的基本结构。</p> <ol> <li> <p>创建新项目：</p> <p>使用以下命令创建新项目目录（例如 <code class="language-plaintext highlighter-rouge">my_project</code>），并生成默认的 <code class="language-plaintext highlighter-rouge">pyproject.toml</code> 文件。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry new my_project
</code></pre></div> </div> <p>该命令将在项目目录中生成以下结构：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>my_project/
├── my_project/
│   └── __init__.py
├── pyproject.toml
└── tests/
    └── __init__.py
</code></pre></div> </div> </li> <li> <p>初始化现有项目（可选）：</p> <p>如果已存在项目并希望使用 Poetry 进行管理，可以通过 <code class="language-plaintext highlighter-rouge">poetry init</code> 初始化该项目。此命令将引导生成 <code class="language-plaintext highlighter-rouge">pyproject.toml</code> 文件，并配置初始依赖项：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>existing_project
poetry init
</code></pre></div> </div> </li> </ol> <h4 id="3-管理项目依赖">3. 管理项目依赖</h4> <p>Poetry 提供了便捷的依赖管理方式，区分了生产依赖和开发依赖。</p> <ol> <li> <p><strong>添加生产依赖</strong>：</p> <p>将依赖项添加到生产环境，例如 <code class="language-plaintext highlighter-rouge">requests</code> 库：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry add requests
</code></pre></div> </div> </li> <li> <p><strong>添加开发依赖</strong>：</p> <p>如果某些库仅用于开发和测试环境，可以使用 <code class="language-plaintext highlighter-rouge">--dev</code> 参数。此参数将依赖项添加到 <code class="language-plaintext highlighter-rouge">[tool.poetry.dev-dependencies]</code> 部分。例如，添加 <code class="language-plaintext highlighter-rouge">pytest</code> 作为开发依赖：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry add pytest <span class="nt">--dev</span>
</code></pre></div> </div> </li> <li> <p><strong>安装所有依赖</strong>：</p> <p>项目依赖项写入 <code class="language-plaintext highlighter-rouge">pyproject.toml</code> 文件后，可以使用以下命令安装所有依赖：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nb">install</span>
</code></pre></div> </div> <p><code class="language-plaintext highlighter-rouge">poetry install</code> 会自动创建虚拟环境，并在虚拟环境中安装所需依赖。如果已存在 <code class="language-plaintext highlighter-rouge">poetry.lock</code> 文件，它将确保安装的依赖版本与锁定文件中的版本一致，以保证环境一致性。</p> </li> </ol> <hr/> <h4 id="4-管理虚拟环境">4. 管理虚拟环境</h4> <p>Poetry 在项目目录外创建虚拟环境，并自动激活和使用该虚拟环境。</p> <ol> <li> <p><strong>激活虚拟环境</strong>：</p> <p>可以通过以下命令激活 Poetry 创建的虚拟环境：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry shell
</code></pre></div> </div> </li> <li> <p><strong>退出虚拟环境</strong>：</p> <p>在虚拟环境中工作结束后，输入 <code class="language-plaintext highlighter-rouge">exit</code> 即可退出。</p> </li> <li> <p><strong>查看虚拟环境路径</strong>：</p> <p>若需查看虚拟环境的实际存储路径，可以使用：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nb">env </span>info <span class="nt">--path</span>
</code></pre></div> </div> </li> <li> <p><strong>删除虚拟环境</strong>（可选）：</p> <p>如果需要重新创建虚拟环境或清理环境，可以删除虚拟环境：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nb">env </span>remove python
</code></pre></div> </div> </li> </ol> <h4 id="5-管理依赖锁定文件">5. 管理依赖锁定文件</h4> <p>Poetry 使用 <code class="language-plaintext highlighter-rouge">poetry.lock</code> 文件锁定依赖的确切版本，以保证跨环境的一致性。</p> <ol> <li> <p><strong>更新依赖版本</strong>：</p> <p>当需要更新依赖版本时，可以使用以下命令重新解析依赖项并更新锁定文件：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry update
</code></pre></div> </div> </li> <li> <p><strong>安装指定的锁定版本</strong>：</p> <p>在协作项目中，团队成员可以基于 <code class="language-plaintext highlighter-rouge">poetry.lock</code> 文件安装项目的精确依赖项版本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nb">install</span>
</code></pre></div> </div> </li> </ol> <h4 id="6-运行脚本和命令">6. 运行脚本和命令</h4> <p>Poetry 支持直接在虚拟环境中运行脚本或命令，简化了命令管理。</p> <ol> <li> <p><strong>运行项目脚本</strong>：</p> <p>使用 <code class="language-plaintext highlighter-rouge">poetry run</code> 在虚拟环境中执行命令。例如，执行 Python 脚本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry run python script.py
</code></pre></div> </div> </li> <li> <p><strong>直接运行单元测试</strong>：</p> <p>可以在虚拟环境中直接运行测试命令，如 <code class="language-plaintext highlighter-rouge">pytest</code>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry run pytest
</code></pre></div> </div> </li> </ol> <h4 id="7-发布-python-包">7. 发布 Python 包</h4> <p>Poetry 可以将项目发布到 <a href="https://pypi.org/">PyPI</a> 或其他自定义包仓库。</p> <ol> <li> <p><strong>构建项目</strong>：</p> <p>Poetry 提供了一键构建项目的功能，将项目打包为 <code class="language-plaintext highlighter-rouge">.whl</code> 和 <code class="language-plaintext highlighter-rouge">.tar.gz</code> 文件，准备发布：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry build
</code></pre></div> </div> </li> <li> <p><strong>发布到 PyPI</strong>：</p> <p>将包发布到 PyPI，需要在 <code class="language-plaintext highlighter-rouge">~/.pypirc</code> 文件中配置 PyPI 凭据，或使用 Poetry 的 <code class="language-plaintext highlighter-rouge">publish</code> 命令交互输入：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry publish <span class="nt">--build</span>
</code></pre></div> </div> <blockquote> <p><strong>注意</strong>：要在测试环境中验证发布过程，可以使用 <code class="language-plaintext highlighter-rouge">--repository</code> 参数发布到 PyPI 测试仓库。</p> </blockquote> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry publish <span class="nt">--repository</span> testpypi
</code></pre></div> </div> </li> </ol> <hr/> <p>以下是针对计量经济学领域使用 R 环境的配置指南，包括安装 R 和 RStudio、常用的 R 包配置等。</p> <hr/> <h2 id="在-ubuntu-上配置-r-环境用于计量经济学分析">在 Ubuntu 上配置 R 环境用于计量经济学分析</h2> <p>在计量经济学领域，R 适合处理经济数据、执行回归分析、时间序列分析等任务。</p> <h3 id="1-安装-r">1. 安装 R</h3> <p>Ubuntu 默认的软件仓库包含 R，但可能不是最新版本。为了获取最新的 R 版本，可以使用 CRAN 仓库。</p> <ol> <li> <p><strong>添加 CRAN 仓库</strong>：</p> <p>更新软件包列表并安装必要的依赖项：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>software-properties-common dirmngr <span class="nt">-y</span>
</code></pre></div> </div> </li> <li> <p><strong>添加 R 项目的 GPG 密钥</strong>：</p> <p>下载并添加 CRAN 的 GPG 公钥，以确保软件包的完整性：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-qO-</span> https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
</code></pre></div> </div> </li> <li> <p><strong>验证 GPG 密钥</strong>（可选）：</p> <p>验证密钥的指纹（<code class="language-plaintext highlighter-rouge">E298A3A825C0D65DFD57CBB651716619E084DAB9</code>）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--show-keys</span> /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
</code></pre></div> </div> </li> <li> <p><strong>添加 CRAN 仓库到源列表</strong>：</p> <p>将 CRAN 仓库添加到 apt 源列表中，以确保获取最新版本的 R：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository <span class="s2">"deb https://cloud.r-project.org/bin/linux/ubuntu </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2">-cran40/"</span>
</code></pre></div> </div> </li> <li> <p><strong>安装 R 和开发包</strong>：</p> <p>安装最新版本的 R 和开发库：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>r-base r-base-dev <span class="nt">-y</span>
</code></pre></div> </div> </li> </ol> <h3 id="2-安装-rstudio">2. 安装 RStudio</h3> <p>RStudio 是一个功能强大的 IDE，适用于数据分析和可视化。RStudio 的安装过程简单，具体安装步骤可参考 <a href="https://posit.co/download/rstudio-server/">RStudio 官方安装指南</a>。</p> <p><strong>安装步骤</strong>：</p> <ol> <li>下载 RStudio Server 的最新版本。</li> <li> <p>使用 <code class="language-plaintext highlighter-rouge">dpkg</code> 命令进行安装：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dpkg <span class="nt">-i</span> rstudio-server-&lt;version&gt;.deb
</code></pre></div> </div> </li> <li> <p>检查安装状态：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status rstudio-server
</code></pre></div> </div> </li> </ol> <p>RStudio Server 安装成功后，可以通过 <code class="language-plaintext highlighter-rouge">http://&lt;your-server-ip&gt;:8787</code> 在浏览器中访问。</p> <h3 id="3-安装计量经济学相关的-r-包">3. 安装计量经济学相关的 R 包</h3> <p>计量经济学分析通常需要专门的数据处理、回归分析和时间序列分析包。</p> <ol> <li> <p><strong>安装系统依赖</strong>：</p> <p>安装系统级的开发包，以确保 R 包安装顺利（特别是对一些需要编译的包，如 <code class="language-plaintext highlighter-rouge">tidyverse</code> 和 <code class="language-plaintext highlighter-rouge">data.table</code>）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>build-essential libssl-dev libcurl4-openssl-dev libxml2-dev
</code></pre></div> </div> </li> <li> <p><strong>安装计量经济学和数据处理包</strong>：</p> <p>启动 R 控制台并安装常用的计量经济学包：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>R
</code></pre></div> </div> <p>在 R 控制台中执行以下命令：</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">chooseCRANmirror</span><span class="p">(</span><span class="n">graphics</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="n">install.packages</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"tidyverse"</span><span class="p">,</span><span class="w"> </span><span class="s2">"data.table"</span><span class="p">,</span><span class="w"> </span><span class="s2">"broom"</span><span class="p">,</span><span class="w"> </span><span class="s2">"plm"</span><span class="p">,</span><span class="w"> </span><span class="s2">"forecast"</span><span class="p">,</span><span class="w"> </span><span class="s2">"lmtest"</span><span class="p">,</span><span class="w"> </span><span class="s2">"sandwich"</span><span class="p">,</span><span class="w"> </span><span class="s2">"stargazer"</span><span class="p">))</span><span class="w">
</span></code></pre></div> </div> <ul> <li><code class="language-plaintext highlighter-rouge">tidyverse</code>：包含 <code class="language-plaintext highlighter-rouge">dplyr</code>、<code class="language-plaintext highlighter-rouge">ggplot2</code>、<code class="language-plaintext highlighter-rouge">tidyr</code> 等数据处理和可视化包。</li> <li><code class="language-plaintext highlighter-rouge">data.table</code>：用于快速数据处理。</li> <li><code class="language-plaintext highlighter-rouge">broom</code>：将回归分析结果整理成易于分析的表格。</li> <li><code class="language-plaintext highlighter-rouge">plm</code>：用于面板数据回归分析。</li> <li><code class="language-plaintext highlighter-rouge">forecast</code>：用于时间序列预测和分析。</li> <li><code class="language-plaintext highlighter-rouge">lmtest</code> 和 <code class="language-plaintext highlighter-rouge">sandwich</code>：提供计量经济学的测试工具和稳健标准误差。</li> <li><code class="language-plaintext highlighter-rouge">stargazer</code>：用于将回归结果输出为易于理解的表格，适合论文或报告。</li> </ul> </li> <li> <p><strong>安装高级计量经济学工具</strong>：</p> <ul> <li><code class="language-plaintext highlighter-rouge">AER</code>（Applied Econometrics with R）：包含用于经济学研究的常用函数和数据集。</li> <li><code class="language-plaintext highlighter-rouge">urca</code>：提供单根和协整检验。</li> <li><code class="language-plaintext highlighter-rouge">vars</code>：用于向量自回归（VAR）分析。</li> </ul> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">install.packages</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"AER"</span><span class="p">,</span><span class="w"> </span><span class="s2">"urca"</span><span class="p">,</span><span class="w"> </span><span class="s2">"vars"</span><span class="p">))</span><span class="w">
</span></code></pre></div> </div> </li> <li> <p><strong>安装金融时间序列分析包</strong>（可选）：</p> <ul> <li><code class="language-plaintext highlighter-rouge">quantmod</code> 和 <code class="language-plaintext highlighter-rouge">TTR</code>：用于金融市场数据分析和技术指标计算。</li> <li><code class="language-plaintext highlighter-rouge">zoo</code> 和 <code class="language-plaintext highlighter-rouge">xts</code>：处理不规则时间序列数据。</li> </ul> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">install.packages</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"quantmod"</span><span class="p">,</span><span class="w"> </span><span class="s2">"TTR"</span><span class="p">,</span><span class="w"> </span><span class="s2">"zoo"</span><span class="p">,</span><span class="w"> </span><span class="s2">"xts"</span><span class="p">))</span><span class="w">
</span></code></pre></div> </div> </li> </ol> <h3 id="4-使用-github-令牌安装私有包">4. 使用 GitHub 令牌安装私有包</h3> <p>如果需要从 GitHub 安装某些实验性或定制的包，建议使用 GitHub 令牌，以免受到 API 速率限制。</p> <p><strong>生成 GitHub 令牌</strong>：</p> <ol> <li> <p>在 R 控制台中生成令牌：</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">usethis</span><span class="o">::</span><span class="n">create_github_token</span><span class="p">()</span><span class="w">
</span></code></pre></div> </div> </li> <li> <p>在 GitHub 网站上生成一个新的 Personal Access Token（路径：<code class="language-plaintext highlighter-rouge">Settings</code> → <code class="language-plaintext highlighter-rouge">Developer settings</code> → <code class="language-plaintext highlighter-rouge">Personal access token</code> → <code class="language-plaintext highlighter-rouge">Tokens (classic)</code>）。</p> </li> <li> <p><strong>配置 GitHub 令牌</strong>：</p> <p>将生成的令牌添加到 R 环境中：</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gitcreds</span><span class="o">::</span><span class="n">gitcreds_set</span><span class="p">()</span><span class="w">
</span></code></pre></div> </div> </li> </ol> <p>在此设置下，可以安全地从 GitHub 安装私有包，避免 API 限制。</p> <h3 id="5-示例安装和使用-plm-包进行面板数据回归">5. 示例：安装和使用 <code class="language-plaintext highlighter-rouge">plm</code> 包进行面板数据回归</h3> <p>假设要使用面板数据进行回归分析，下面是如何安装 <code class="language-plaintext highlighter-rouge">plm</code> 并执行固定效应模型的示例：</p> <ol> <li> <p><strong>安装 <code class="language-plaintext highlighter-rouge">plm</code></strong>（如果未安装）：</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">install.packages</span><span class="p">(</span><span class="s2">"plm"</span><span class="p">)</span><span class="w">
</span></code></pre></div> </div> </li> <li> <p><strong>加载并使用 <code class="language-plaintext highlighter-rouge">plm</code></strong>：</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">plm</span><span class="p">)</span><span class="w">

</span><span class="c1"># 创建示例面板数据集</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"Produc"</span><span class="p">,</span><span class="w"> </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"plm"</span><span class="p">)</span><span class="w">
</span><span class="n">pdata</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pdata.frame</span><span class="p">(</span><span class="n">Produc</span><span class="p">,</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"state"</span><span class="p">,</span><span class="w"> </span><span class="s2">"year"</span><span class="p">))</span><span class="w">

</span><span class="c1"># 固定效应模型回归</span><span class="w">
</span><span class="n">fe_model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">plm</span><span class="p">(</span><span class="nf">log</span><span class="p">(</span><span class="n">gsp</span><span class="p">)</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">pcap</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">hwy</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">water</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">util</span><span class="p">),</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pdata</span><span class="p">,</span><span class="w"> </span><span class="n">model</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"within"</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">fe_model</span><span class="p">)</span><span class="w">
</span></code></pre></div> </div> <p>以下是整理优化后的指南，以帮助更有效地同步数据、安装字体、并处理 Nvidia 驱动程序和库的相关问题。</p> </li> </ol> <hr/> <h2 id="其他问题">其他问题</h2> <hr/> <h3 id="1-同步数据">1. 同步数据</h3> <p>要将本地数据同步到远程服务器，建议使用 <code class="language-plaintext highlighter-rouge">rsync</code>，这是一种高效且可靠的同步方法。更多细节应参考<a href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories">此教程</a>。</p> <ul> <li> <p><strong>同步命令</strong>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync <span class="nt">-r</span> /path/to/sync/ &lt;username&gt;@&lt;remote_host&gt;:&lt;destination_directory&gt;
</code></pre></div> </div> <p>上述命令会将本地目录 <code class="language-plaintext highlighter-rouge">/path/to/sync/</code> 的所有内容「推送」到远程服务器的 <code class="language-plaintext highlighter-rouge">&lt;destination_directory&gt;</code>。</p> </li> <li> <p><strong>监控大文件的传输进度</strong>：</p> <p>如果同步的是较大文件，可以用 <code class="language-plaintext highlighter-rouge">watch</code> 命令来监控同步进度：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>watch <span class="nt">-n</span> &lt;time_interval&gt; <span class="nb">du</span> <span class="nt">-sh</span> /path/to/large/file
</code></pre></div> </div> <p>该命令会每隔 <code class="language-plaintext highlighter-rouge">&lt;time_interval&gt;</code> 秒刷新一次文件的大小变化。</p> </li> </ul> <hr/> <h3 id="2-安装常用字体">2. 安装常用字体</h3> <p>Linux 系统默认不带有一些 Windows 中的常用字体（例如 <code class="language-plaintext highlighter-rouge">Arial</code> 和 <code class="language-plaintext highlighter-rouge">Times New Roman</code>）。安装这些字体可以改善文档和网站的显示效果，特别是那些依赖这些字体的图形输出。安装 Microsoft TrueType 核心字体包并刷新缓存：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>msttcorefonts
<span class="nb">rm</span> <span class="nt">-rf</span> ~/.cache/matplotlib
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">msttcorefonts</code> 包括多种 Microsoft 字体，如 Arial 和 Times New Roman。</li> <li>第二个命令删除了 <code class="language-plaintext highlighter-rouge">matplotlib</code> 缓存目录，以确保更新后的字体正确加载。</li> </ul> <hr/> <h3 id="3-驱动程序库版本不匹配">3. 驱动程序/库版本不匹配</h3> <p>在运行 <code class="language-plaintext highlighter-rouge">nvidia-smi</code> 时，如果出现以下错误：</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failed to initialize NVML: Driver/library version mismatch
</code></pre></div></div> <p>可以参考 <a href="https://stackoverflow.com/questions/43022843/nvidia-nvml-driver-library-version-mismatch/45319156#45319156">Stack Overflow 上的解决方案</a>。简要的步骤如下：</p> <ol> <li> <p><strong>重启服务器</strong>：<br/> 某些情况下，重启服务器即可解决问题：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>reboot
</code></pre></div> </div> </li> <li> <p><strong>卸载并重新安装 Nvidia 驱动程序</strong>：</p> <p>如果重启无效，尝试以下命令清除现有的 Nvidia 驱动程序并重新安装：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt purge nvidia<span class="k">*</span> libnvidia<span class="k">*</span>
<span class="nb">sudo </span>ubuntu-drivers <span class="nb">install
sudo </span>reboot
</code></pre></div> </div> </li> </ol> <hr/> <h3 id="4升级-nvidia-驱动程序">4.升级 Nvidia 驱动程序</h3> <p>要升级 Nvidia 驱动程序，可以按照以下步骤进行：</p> <ol> <li> <p><strong>卸载旧驱动程序</strong>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt purge <span class="k">*</span>nvidia<span class="k">*</span> <span class="nt">-y</span>
<span class="nb">sudo </span>apt remove <span class="k">*</span>nvidia<span class="k">*</span> <span class="nt">-y</span>
<span class="nb">sudo rm</span> /etc/apt/sources.list.d/cuda<span class="k">*</span>
<span class="nb">sudo </span>apt autoremove <span class="nt">-y</span> <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt autoclean <span class="nt">-y</span>
<span class="nb">sudo rm</span> <span class="nt">-rf</span> /usr/local/cuda<span class="k">*</span>
</code></pre></div> </div> </li> <li> <p><strong>查找并安装推荐的驱动程序</strong>：</p> <p>运行以下命令来查找推荐的 Nvidia 驱动程序版本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu-drivers devices
</code></pre></div> </div> <p>或者通过以下命令安装指定版本（例如 <code class="language-plaintext highlighter-rouge">550</code>，根据系统需求调整版本号）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>libnvidia-common-550-server libnvidia-gl-550-server nvidia-driver-550-server <span class="nt">-y</span>
</code></pre></div> </div> </li> <li> <p><strong>重启并检查</strong>：</p> <p>重启服务器并使用 <code class="language-plaintext highlighter-rouge">nvidia-smi</code> 检查新驱动是否正常运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>reboot now
</code></pre></div> </div> <p>如果 <code class="language-plaintext highlighter-rouge">nvidia-smi</code> 返回以下错误：</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NVIDIA-SMI has failed because it couldn't communicate with the NVIDIA driver.
</code></pre></div> </div> <p>尝试重新安装内核头文件并重启。</p> </li> </ol> <hr/> <h3 id="5内核头文件安装和-gcc-配置">5.内核头文件安装和 GCC 配置</h3> <p>如遇到内核头文件或 GCC 版本问题，按以下步骤操作：</p> <ol> <li> <p><strong>重新安装内核头文件</strong>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">--reinstall</span> linux-headers-<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>
<span class="nb">sudo </span>reboot
</code></pre></div> </div> </li> <li> <p><strong>更新 GCC 版本</strong>：</p> <p>如果内核头文件安装过程中遇到 GCC 错误，可以升级到 <code class="language-plaintext highlighter-rouge">gcc-12</code>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>gcc-12
<span class="nb">sudo </span>update-alternatives <span class="nt">--install</span> /usr/bin/gcc gcc /usr/bin/gcc-12 12
</code></pre></div> </div> <p>重新安装内核头文件并重启服务器后，<code class="language-plaintext highlighter-rouge">nvidia-smi</code> 应该能够正常工作。</p> </li> </ol>]]></content><author><name></name></author><category term="Productivity"/><category term="Ubuntu"/><category term="Productivity"/><category term="Deployment"/><category term="Server"/><summary type="html"><![CDATA[如何部署一个 Linux 服务器]]></summary></entry><entry><title type="html">为什么还在写博客</title><link href="https://waynehsucn.github.io//blog/2024/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E5%9C%A8%E5%86%99%E5%8D%9A%E5%AE%A2/" rel="alternate" type="text/html" title="为什么还在写博客"/><published>2024-07-14T12:44:14+00:00</published><updated>2024-07-14T12:44:14+00:00</updated><id>https://waynehsucn.github.io//blog/2024/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E5%9C%A8%E5%86%99%E5%8D%9A%E5%AE%A2</id><content type="html" xml:base="https://waynehsucn.github.io//blog/2024/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E5%9C%A8%E5%86%99%E5%8D%9A%E5%AE%A2/"><![CDATA[<blockquote> <p>剪辑自 <a href="http://nathanmarz.com/blog/you-should-blog-even-if-you-have-no-readers.html">You should blog even if you have no readers</a></p> </blockquote> <p>Spencer Fry 写了一篇关于「为什么创业者应该写作」的优秀文章。我想进一步补充，其实写作的好处远远超出想象，即使你没有读者（不论你是否是创业者），也依然值得写一个博客。</p> <p>我现在有 50 多个未完成的草稿。有些只是我随意写下的一些点子，记录着自我辩论的过程。大多数草稿可能永远不会发布，但每一篇写作都带给我了独特的价值。</p> <h3 id="写作让你成为更好的读者">写作让你成为更好的读者</h3> <p>写博客改变了我阅读他人作品的方式。</p> <p>在努力寻找适合的结构和表达方式的过程中，我更敏锐地察觉到什么样的论点是好的，什么样的论点是不足的。我也更擅长发现他人推理中的漏洞。</p> <p>与此同时，在阅读时我不再轻易被一些表面上反驳文章的弱势反例所误导。几乎每篇文章中都会有一些反例，这些反例可能基于个别的特例。网络评论者们很喜欢指出这些反例。然而，这些特例常常会忽略文章主要的论点。通过理解文章背后的隐含背景，我从阅读中获得了更多价值。</p> <p>我也更注重优秀作家的写作风格。我会在脑海中记录好作家表达想法的方式。我一直很喜欢 Paul Graham 的文章，但现在我更欣赏他如何组织文章。他有一种令人入迷的能力，能将读者带入他的世界，让人从他的视角来看待问题。我还从阅读 Bradford Cross 的博客中学到了很多好的写作技巧；他的文章结构清晰，短小的段落使阅读非常流畅。</p> <h3 id="写作让你更聪明">写作让你更聪明</h3> <p>写作能揭示出思维中的漏洞。当你的想法写下来并回看时，它们远不如在脑海中那么有说服力。写作迫使你通过思考反驳来使自己的观点更加成熟。</p> <p>写作帮助你将思路组织得更加连贯。这让你在相关话题上成为更好的对话者。我无法数清有多少次，因为提前通过写作整理了想法，从而与他人展开了更深入的交流。</p> <h3 id="其他的好处都是附加的">其他的好处都是附加的</h3> <p>写作带来的其他好处——个人品牌、建立人脉、获得更多机会——这些只是附加的好处。虽然这些好处可能会非常大，但它们并不是你应该写作的主要原因。</p> <p>你应该写作，因为写作会让你成为一个更好的人。</p>]]></content><author><name></name></author><category term="Collection"/><category term="Discussion"/><category term="Thoughts"/><category term="Blogging"/><summary type="html"><![CDATA[You should blog even if you have no readers]]></summary></entry><entry><title type="html">Word 排版记录</title><link href="https://waynehsucn.github.io//blog/2024/Word%E6%8E%92%E7%89%88%E8%AE%B0%E5%BD%95/" rel="alternate" type="text/html" title="Word 排版记录"/><published>2024-06-23T21:35:00+00:00</published><updated>2024-06-23T21:35:00+00:00</updated><id>https://waynehsucn.github.io//blog/2024/Word%E6%8E%92%E7%89%88%E8%AE%B0%E5%BD%95</id><content type="html" xml:base="https://waynehsucn.github.io//blog/2024/Word%E6%8E%92%E7%89%88%E8%AE%B0%E5%BD%95/"><![CDATA[<h2 id="word-宏">Word 宏</h2> <h3 id="交叉引用颜色">交叉引用颜色</h3> <p>用于将 word 中的交叉引用、Endnote/Zotero 交叉引用自动格式化，默认颜色为蓝色。</p> <pre><code class="language-basic">Sub CitingColor()
    For i = 1 To ActiveDocument.Fields.Count '遍历文档所有域
        If Left(ActiveDocument.Fields(i).Code, 4) = " REF" Or Left(ActiveDocument.Fields(i).Code, 14) = " ADDIN EN.CITE" Or Left(ActiveDocument.Fields(i).Code, 31) = " ADDIN ZOTERO_ITEM CSL_CITATION" Then 'Word自带的交叉引用的域代码起始4位是" REF"（注意空格），EndNote插入的引用域代码的起始14位是" ADDIN EN.CITE"，Zotero插入的引用域代码的起始31位是" ADDIN ZOTERO_ITEM CSL_CITATION"。根据需求可添加其他类型。
        ActiveDocument.Fields(i).Select '选中上述几类域
        Selection.Font.Color = RGB(31, 77, 160) '设置字体颜色
        End If
    Next
End Sub
</code></pre> <h3 id="mathtype-统一缩放">Mathtype 统一缩放</h3> <p>用于处理 Mathtype 公式更新后部分公式高度不一致的问题，重新统一缩放代码。</p> <pre><code class="language-basic">Sub EqMathtype_100()
'
' EqMathtype_100 Macro
''
Dim i As Integer
Dim total As Integer
total = ActiveDocument.InlineShapes.Count
i = 0
For Each s In ActiveDocument.InlineShapes
i = i + 1
On Error Resume Next
Application.StatusBar = "Progress: " &amp; i &amp; " of " &amp; total
If s.Type = msoAutoShape Then
If s.OLEFormat.ClassType = "Equation.DSMT4" Then
With s
.ScaleHeight = 100
.ScaleWidth = 100
End With
End If
End If
Next
End Sub
</code></pre>]]></content><author><name></name></author><category term="Writing"/><category term="Word"/><category term="Typesetting"/><summary type="html"><![CDATA[常用的 Word 排版经验和宏工具]]></summary></entry><entry><title type="html">机箱风扇控制</title><link href="https://waynehsucn.github.io//blog/2024/%E6%9C%BA%E7%AE%B1%E9%A3%8E%E6%89%87%E6%8E%A7%E5%88%B6/" rel="alternate" type="text/html" title="机箱风扇控制"/><published>2024-05-26T19:06:14+00:00</published><updated>2024-05-26T19:06:14+00:00</updated><id>https://waynehsucn.github.io//blog/2024/%E6%9C%BA%E7%AE%B1%E9%A3%8E%E6%89%87%E6%8E%A7%E5%88%B6</id><content type="html" xml:base="https://waynehsucn.github.io//blog/2024/%E6%9C%BA%E7%AE%B1%E9%A3%8E%E6%89%87%E6%8E%A7%E5%88%B6/"><![CDATA[<h2 id="碎碎念">碎碎念</h2> <p>之前一直不觉得自己 ATX 主机的风扇很吵，但在新装了台 ITX 小主机后，愈发觉得 ATX 主机是真的吵。尤其是把它和另一个 mini 主机放在一起时，被我认为非常吵 mini 主机都显得很安静了。</p> <p>主板自带的风扇调速功能，只提供了两种方式：依赖于主板温度或 CPU 温度，但我将 CPU 低温时的风扇转速调到极低后，似乎并没有效果。可能是铭瑄的 BIOS 太差劲了，也可能是我的机箱风扇不行。</p> <p>机箱风扇什么时候需要高速运转呢？一般是在显卡高负载时。而主板自带的风扇调速依赖于主板的温度传感器，但主板并不是主要发热源，只是间接受热，这之间存在误差。根据显卡温度调节机箱风扇速度才是正解，但 BIOS 里无法这样设置。</p> <p>我在 GitHub 上找到个小软件<code class="language-plaintext highlighter-rouge">FanControl</code>，功能还挺强的，特此记录下来。</p> <h2 id="转速控制">转速控制</h2> <p>总共有三个模块 <strong>Controls(控制)</strong>、<strong>Speeds(速度)</strong>、<strong>Curves(曲线)</strong>。</p> <p><img src="https://xwj770427414.oss-cn-beijing.aliyuncs.com/img/image-20240620182749451.png" alt="image-20240620182749451" style="zoom: 33%;"/></p> <p>上来先随便调了调，突然就发现了问题，我的机箱风扇没法通过这个软件控制，CPU 风扇可以。另外一个问题是，原来我的两个机箱风扇一直是跑在最高转速（1350 rpm），我人都傻了，我说怎么那么吵。原来有四个机箱风扇，得亏我拆了两个。顺手查了查风扇信息，Arctic F12 3Pin，风扇风评还是不错的，没有买错。但也有人指出，1000 转一下很安静，1000 转以上就很吵。</p> <p>再仔细查一查风扇参数，好家伙，原来不支持 PWM 调节。我说怎么主板上调整后也没有用。再进 BIOS 瞧一瞧，两个机箱风扇只有一个可以选择 DC 调节，另一个不知道为什么无法调整，有空拆下来看看是不是接口不支持。保存 BIOS 设置后，机箱外侧的风扇已经支持调节转速了。现在可以根据需求调节转速了。</p> <p><img src="https://xwj770427414.oss-cn-beijing.aliyuncs.com/img/image-20240620184306186.png" alt="image-20240620184306186" style="zoom: 33%;"/></p> <h2 id="参数设置">参数设置</h2> <ul> <li><strong>Curves 是需要我们手动制定的转速规则</strong>，第一次打开的并没有 Curves。点击右下角加号进行添加规则，Linear 或者 Graph 都是很容易配置的。 <ul> <li>Hysteresis、Response time 是设置灵敏度、响应速度相关的，维持默认即可。Temperature source 温度源设置成 GPU 显卡。</li> <li>我简单看了看，觉得 Graph 式的 Curves 比较直观，且方便理解。大概设置了三档，来控制机箱风扇： <ul> <li>低温阶段（CPU/GPU 温度低于 40°C）；风扇转速：10-20%；保持低噪音，足够的散热以应对轻度负载。</li> <li>中温阶段（CPU/GPU 温度在 40°C 到 60°C 之间）；风扇转速：20-40%；适应中等负载，如上网、看视频或轻度游戏，同时保持适中的噪音水平。</li> <li>高温阶段（CPU/GPU 温度高于 60°C）；风扇转速：40-100%；在高负载时（如大型游戏或重度渲染任务），提供最大的散热效能，风扇转速随温度上升而非线性增加，以有效控制温度。</li> </ul> </li> </ul> </li> </ul> <p><img src="https://xwj770427414.oss-cn-beijing.aliyuncs.com/img/image-20240620185657196.png" alt="image-20240620185657196" style="zoom: 50%;"/></p> <ul> <li><strong>Speeds 里面的一个个框，代表当前系统里所有的风扇。</strong>默认情况下显示的是 Fan #1、Fan #2、Fan #3 …，可以重命名。</li> <li><strong>Controls 负责把 Speeds 和 Curves 关联起来</strong>。 <ul> <li>点击 Control 右上角的设置、Select matching fan 进行风扇绑定。</li> <li>Control 的参数也很好理解：Enable：开关；Fan curve：转速规则，选择此前配置好的即可；offset：抵消参数，用于平衡多个风扇的转速，让它们尽可能相等</li> </ul> </li> </ul> <hr/> <p>最后，调整参数后的风扇控制结果如下：</p> <p><img src="https://xwj770427414.oss-cn-beijing.aliyuncs.com/img/image-20240620190508654.png" alt="image-20240620190508654" style="zoom: 33%;"/></p>]]></content><author><name></name></author><category term="Tools"/><category term="Hardware"/><category term="Optimization"/><summary type="html"><![CDATA[设定温度曲线控制机箱风扇速度]]></summary></entry></feed>